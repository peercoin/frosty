// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class FrostyRust {
  FrostIdentifier identifierFromString({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIdentifierFromStringConstMeta;

  FrostIdentifier identifierFromU16({required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIdentifierFromU16ConstMeta;

  FrostIdentifier identifierFromBytes({required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIdentifierFromBytesConstMeta;

  Uint8List identifierToBytes({required FrostIdentifier identifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIdentifierToBytesConstMeta;

  (
    DkgRound1SecretPackage,
    DkgRound1Package
  ) dkgPart1({required FrostIdentifier identifier, required int maxSigners, required int minSigners, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDkgPart1ConstMeta;

  DkgRound1Package publicCommitmentFromBytes({required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPublicCommitmentFromBytesConstMeta;

  Uint8List publicCommitmentToBytes({required DkgRound1Package commitment, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPublicCommitmentToBytesConstMeta;

  (
    DkgRound2SecretPackage,
    List<DkgRound2IdentifierAndShare>
  ) dkgPart2({required DkgRound1SecretPackage round1Secret, required List<DkgCommitmentForIdentifier> round1Commitments, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDkgPart2ConstMeta;

  DkgRound2Package shareToGiveFromBytes({required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShareToGiveFromBytesConstMeta;

  Uint8List shareToGiveToBytes({required DkgRound2Package share, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShareToGiveToBytesConstMeta;

  KeyShareData dkgPart3({required DkgRound2SecretPackage round2Secret, required List<DkgCommitmentForIdentifier> round1Commitments, required List<DkgRound2IdentifierAndShare> round2Shares, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDkgPart3ConstMeta;

  DropFnType get dropOpaqueDkgRound1Package;
  ShareFnType get shareOpaqueDkgRound1Package;
  OpaqueTypeFinalizer get DkgRound1PackageFinalizer;

  DropFnType get dropOpaqueDkgRound1SecretPackage;
  ShareFnType get shareOpaqueDkgRound1SecretPackage;
  OpaqueTypeFinalizer get DkgRound1SecretPackageFinalizer;

  DropFnType get dropOpaqueDkgRound2Package;
  ShareFnType get shareOpaqueDkgRound2Package;
  OpaqueTypeFinalizer get DkgRound2PackageFinalizer;

  DropFnType get dropOpaqueDkgRound2SecretPackage;
  ShareFnType get shareOpaqueDkgRound2SecretPackage;
  OpaqueTypeFinalizer get DkgRound2SecretPackageFinalizer;

  DropFnType get dropOpaqueFrostIdentifier;
  ShareFnType get shareOpaqueFrostIdentifier;
  OpaqueTypeFinalizer get FrostIdentifierFinalizer;

  DropFnType get dropOpaqueKeyShareData;
  ShareFnType get shareOpaqueKeyShareData;
  OpaqueTypeFinalizer get KeyShareDataFinalizer;
}

@sealed
class DkgRound1Package extends FrbOpaque {
  final FrostyRust bridge;
  DkgRound1Package.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueDkgRound1Package;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueDkgRound1Package;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.DkgRound1PackageFinalizer;
}

@sealed
class DkgRound1SecretPackage extends FrbOpaque {
  final FrostyRust bridge;
  DkgRound1SecretPackage.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueDkgRound1SecretPackage;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueDkgRound1SecretPackage;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.DkgRound1SecretPackageFinalizer;
}

@sealed
class DkgRound2Package extends FrbOpaque {
  final FrostyRust bridge;
  DkgRound2Package.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueDkgRound2Package;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueDkgRound2Package;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.DkgRound2PackageFinalizer;
}

@sealed
class DkgRound2SecretPackage extends FrbOpaque {
  final FrostyRust bridge;
  DkgRound2SecretPackage.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueDkgRound2SecretPackage;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueDkgRound2SecretPackage;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.DkgRound2SecretPackageFinalizer;
}

@sealed
class FrostIdentifier extends FrbOpaque {
  final FrostyRust bridge;
  FrostIdentifier.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueFrostIdentifier;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueFrostIdentifier;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.FrostIdentifierFinalizer;
}

@sealed
class KeyShareData extends FrbOpaque {
  final FrostyRust bridge;
  KeyShareData.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueKeyShareData;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueKeyShareData;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.KeyShareDataFinalizer;
}

class DkgCommitmentForIdentifier {
  final FrostIdentifier identifier;
  final DkgRound1Package commitment;

  const DkgCommitmentForIdentifier({
    required this.identifier,
    required this.commitment,
  });
}

class DkgRound2IdentifierAndShare {
  final FrostIdentifier identifier;
  final DkgRound2Package secret;

  const DkgRound2IdentifierAndShare({
    required this.identifier,
    required this.secret,
  });
}

class FrostyRustImpl implements FrostyRust {
  final FrostyRustPlatform _platform;
  factory FrostyRustImpl(ExternalLibrary dylib) => FrostyRustImpl.raw(FrostyRustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FrostyRustImpl.wasm(FutureOr<WasmModule> module) => FrostyRustImpl(module as ExternalLibrary);
  FrostyRustImpl.raw(this._platform);
  FrostIdentifier identifierFromString({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_identifier_from_string(arg0),
      parseSuccessData: _wire2api_FrostIdentifier,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kIdentifierFromStringConstMeta,
      argValues: [
        s
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIdentifierFromStringConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "identifier_from_string",
        argNames: [
          "s"
        ],
      );

  FrostIdentifier identifierFromU16({required int i, dynamic hint}) {
    var arg0 = api2wire_u16(i);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_identifier_from_u16(arg0),
      parseSuccessData: _wire2api_FrostIdentifier,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kIdentifierFromU16ConstMeta,
      argValues: [
        i
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIdentifierFromU16ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "identifier_from_u16",
        argNames: [
          "i"
        ],
      );

  FrostIdentifier identifierFromBytes({required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_identifier_from_bytes(arg0),
      parseSuccessData: _wire2api_FrostIdentifier,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kIdentifierFromBytesConstMeta,
      argValues: [
        bytes
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIdentifierFromBytesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "identifier_from_bytes",
        argNames: [
          "bytes"
        ],
      );

  Uint8List identifierToBytes({required FrostIdentifier identifier, dynamic hint}) {
    var arg0 = _platform.api2wire_FrostIdentifier(identifier);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_identifier_to_bytes(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kIdentifierToBytesConstMeta,
      argValues: [
        identifier
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIdentifierToBytesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "identifier_to_bytes",
        argNames: [
          "identifier"
        ],
      );

  (
    DkgRound1SecretPackage,
    DkgRound1Package
  ) dkgPart1({required FrostIdentifier identifier, required int maxSigners, required int minSigners, dynamic hint}) {
    var arg0 = _platform.api2wire_FrostIdentifier(identifier);
    var arg1 = api2wire_u16(maxSigners);
    var arg2 = api2wire_u16(minSigners);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dkg_part_1(arg0, arg1, arg2),
      parseSuccessData: _wire2api___record__DkgRound1SecretPackage_DkgRound1Package,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDkgPart1ConstMeta,
      argValues: [
        identifier,
        maxSigners,
        minSigners
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDkgPart1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "dkg_part_1",
        argNames: [
          "identifier",
          "maxSigners",
          "minSigners"
        ],
      );

  DkgRound1Package publicCommitmentFromBytes({required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_public_commitment_from_bytes(arg0),
      parseSuccessData: _wire2api_DkgRound1Package,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPublicCommitmentFromBytesConstMeta,
      argValues: [
        bytes
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPublicCommitmentFromBytesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "public_commitment_from_bytes",
        argNames: [
          "bytes"
        ],
      );

  Uint8List publicCommitmentToBytes({required DkgRound1Package commitment, dynamic hint}) {
    var arg0 = _platform.api2wire_DkgRound1Package(commitment);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_public_commitment_to_bytes(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPublicCommitmentToBytesConstMeta,
      argValues: [
        commitment
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPublicCommitmentToBytesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "public_commitment_to_bytes",
        argNames: [
          "commitment"
        ],
      );

  (
    DkgRound2SecretPackage,
    List<DkgRound2IdentifierAndShare>
  ) dkgPart2({required DkgRound1SecretPackage round1Secret, required List<DkgCommitmentForIdentifier> round1Commitments, dynamic hint}) {
    var arg0 = _platform.api2wire_DkgRound1SecretPackage(round1Secret);
    var arg1 = _platform.api2wire_list_dkg_commitment_for_identifier(round1Commitments);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dkg_part_2(arg0, arg1),
      parseSuccessData: _wire2api___record__DkgRound2SecretPackage_list_dkg_round_2_identifier_and_share,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDkgPart2ConstMeta,
      argValues: [
        round1Secret,
        round1Commitments
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDkgPart2ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "dkg_part_2",
        argNames: [
          "round1Secret",
          "round1Commitments"
        ],
      );

  DkgRound2Package shareToGiveFromBytes({required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_share_to_give_from_bytes(arg0),
      parseSuccessData: _wire2api_DkgRound2Package,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kShareToGiveFromBytesConstMeta,
      argValues: [
        bytes
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShareToGiveFromBytesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "share_to_give_from_bytes",
        argNames: [
          "bytes"
        ],
      );

  Uint8List shareToGiveToBytes({required DkgRound2Package share, dynamic hint}) {
    var arg0 = _platform.api2wire_DkgRound2Package(share);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_share_to_give_to_bytes(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kShareToGiveToBytesConstMeta,
      argValues: [
        share
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShareToGiveToBytesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "share_to_give_to_bytes",
        argNames: [
          "share"
        ],
      );

  KeyShareData dkgPart3({required DkgRound2SecretPackage round2Secret, required List<DkgCommitmentForIdentifier> round1Commitments, required List<DkgRound2IdentifierAndShare> round2Shares, dynamic hint}) {
    var arg0 = _platform.api2wire_DkgRound2SecretPackage(round2Secret);
    var arg1 = _platform.api2wire_list_dkg_commitment_for_identifier(round1Commitments);
    var arg2 = _platform.api2wire_list_dkg_round_2_identifier_and_share(round2Shares);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dkg_part_3(arg0, arg1, arg2),
      parseSuccessData: _wire2api_KeyShareData,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDkgPart3ConstMeta,
      argValues: [
        round2Secret,
        round1Commitments,
        round2Shares
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDkgPart3ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "dkg_part_3",
        argNames: [
          "round2Secret",
          "round1Commitments",
          "round2Shares"
        ],
      );

  DropFnType get dropOpaqueDkgRound1Package => _platform.inner.drop_opaque_DkgRound1Package;
  ShareFnType get shareOpaqueDkgRound1Package => _platform.inner.share_opaque_DkgRound1Package;
  OpaqueTypeFinalizer get DkgRound1PackageFinalizer => _platform.DkgRound1PackageFinalizer;

  DropFnType get dropOpaqueDkgRound1SecretPackage => _platform.inner.drop_opaque_DkgRound1SecretPackage;
  ShareFnType get shareOpaqueDkgRound1SecretPackage => _platform.inner.share_opaque_DkgRound1SecretPackage;
  OpaqueTypeFinalizer get DkgRound1SecretPackageFinalizer => _platform.DkgRound1SecretPackageFinalizer;

  DropFnType get dropOpaqueDkgRound2Package => _platform.inner.drop_opaque_DkgRound2Package;
  ShareFnType get shareOpaqueDkgRound2Package => _platform.inner.share_opaque_DkgRound2Package;
  OpaqueTypeFinalizer get DkgRound2PackageFinalizer => _platform.DkgRound2PackageFinalizer;

  DropFnType get dropOpaqueDkgRound2SecretPackage => _platform.inner.drop_opaque_DkgRound2SecretPackage;
  ShareFnType get shareOpaqueDkgRound2SecretPackage => _platform.inner.share_opaque_DkgRound2SecretPackage;
  OpaqueTypeFinalizer get DkgRound2SecretPackageFinalizer => _platform.DkgRound2SecretPackageFinalizer;

  DropFnType get dropOpaqueFrostIdentifier => _platform.inner.drop_opaque_FrostIdentifier;
  ShareFnType get shareOpaqueFrostIdentifier => _platform.inner.share_opaque_FrostIdentifier;
  OpaqueTypeFinalizer get FrostIdentifierFinalizer => _platform.FrostIdentifierFinalizer;

  DropFnType get dropOpaqueKeyShareData => _platform.inner.drop_opaque_KeyShareData;
  ShareFnType get shareOpaqueKeyShareData => _platform.inner.share_opaque_KeyShareData;
  OpaqueTypeFinalizer get KeyShareDataFinalizer => _platform.KeyShareDataFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  DkgRound1Package _wire2api_DkgRound1Package(dynamic raw) {
    return DkgRound1Package.fromRaw(raw[0], raw[1], this);
  }

  DkgRound1SecretPackage _wire2api_DkgRound1SecretPackage(dynamic raw) {
    return DkgRound1SecretPackage.fromRaw(raw[0], raw[1], this);
  }

  DkgRound2Package _wire2api_DkgRound2Package(dynamic raw) {
    return DkgRound2Package.fromRaw(raw[0], raw[1], this);
  }

  DkgRound2SecretPackage _wire2api_DkgRound2SecretPackage(dynamic raw) {
    return DkgRound2SecretPackage.fromRaw(raw[0], raw[1], this);
  }

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  FrostIdentifier _wire2api_FrostIdentifier(dynamic raw) {
    return FrostIdentifier.fromRaw(raw[0], raw[1], this);
  }

  KeyShareData _wire2api_KeyShareData(dynamic raw) {
    return KeyShareData.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (
    DkgRound1SecretPackage,
    DkgRound1Package
  ) _wire2api___record__DkgRound1SecretPackage_DkgRound1Package(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_DkgRound1SecretPackage(arr[0]),
      _wire2api_DkgRound1Package(arr[1]),
    );
  }

  (
    DkgRound2SecretPackage,
    List<DkgRound2IdentifierAndShare>
  ) _wire2api___record__DkgRound2SecretPackage_list_dkg_round_2_identifier_and_share(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_DkgRound2SecretPackage(arr[0]),
      _wire2api_list_dkg_round_2_identifier_and_share(arr[1]),
    );
  }

  DkgRound2IdentifierAndShare _wire2api_dkg_round_2_identifier_and_share(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DkgRound2IdentifierAndShare(
      identifier: _wire2api_FrostIdentifier(arr[0]),
      secret: _wire2api_DkgRound2Package(arr[1]),
    );
  }

  List<DkgRound2IdentifierAndShare> _wire2api_list_dkg_round_2_identifier_and_share(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dkg_round_2_identifier_and_share).toList();
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class FrostyRustPlatform extends FlutterRustBridgeBase<FrostyRustWire> {
  FrostyRustPlatform(ffi.DynamicLibrary dylib) : super(FrostyRustWire(dylib));

// Section: api2wire

  @protected
  wire_DkgRound1Package api2wire_DkgRound1Package(DkgRound1Package raw) {
    final ptr = inner.new_DkgRound1Package();
    _api_fill_to_wire_DkgRound1Package(raw, ptr);
    return ptr;
  }

  @protected
  wire_DkgRound1SecretPackage api2wire_DkgRound1SecretPackage(DkgRound1SecretPackage raw) {
    final ptr = inner.new_DkgRound1SecretPackage();
    _api_fill_to_wire_DkgRound1SecretPackage(raw, ptr);
    return ptr;
  }

  @protected
  wire_DkgRound2Package api2wire_DkgRound2Package(DkgRound2Package raw) {
    final ptr = inner.new_DkgRound2Package();
    _api_fill_to_wire_DkgRound2Package(raw, ptr);
    return ptr;
  }

  @protected
  wire_DkgRound2SecretPackage api2wire_DkgRound2SecretPackage(DkgRound2SecretPackage raw) {
    final ptr = inner.new_DkgRound2SecretPackage();
    _api_fill_to_wire_DkgRound2SecretPackage(raw, ptr);
    return ptr;
  }

  @protected
  wire_FrostIdentifier api2wire_FrostIdentifier(FrostIdentifier raw) {
    final ptr = inner.new_FrostIdentifier();
    _api_fill_to_wire_FrostIdentifier(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_list_dkg_commitment_for_identifier> api2wire_list_dkg_commitment_for_identifier(List<DkgCommitmentForIdentifier> raw) {
    final ans = inner.new_list_dkg_commitment_for_identifier_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_dkg_commitment_for_identifier(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_dkg_round_2_identifier_and_share> api2wire_list_dkg_round_2_identifier_and_share(List<DkgRound2IdentifierAndShare> raw) {
    final ans = inner.new_list_dkg_round_2_identifier_and_share_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_dkg_round_2_identifier_and_share(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _DkgRound1PackageFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_DkgRound1PackagePtr);
  OpaqueTypeFinalizer get DkgRound1PackageFinalizer => _DkgRound1PackageFinalizer;
  late final OpaqueTypeFinalizer _DkgRound1SecretPackageFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_DkgRound1SecretPackagePtr);
  OpaqueTypeFinalizer get DkgRound1SecretPackageFinalizer => _DkgRound1SecretPackageFinalizer;
  late final OpaqueTypeFinalizer _DkgRound2PackageFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_DkgRound2PackagePtr);
  OpaqueTypeFinalizer get DkgRound2PackageFinalizer => _DkgRound2PackageFinalizer;
  late final OpaqueTypeFinalizer _DkgRound2SecretPackageFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_DkgRound2SecretPackagePtr);
  OpaqueTypeFinalizer get DkgRound2SecretPackageFinalizer => _DkgRound2SecretPackageFinalizer;
  late final OpaqueTypeFinalizer _FrostIdentifierFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_FrostIdentifierPtr);
  OpaqueTypeFinalizer get FrostIdentifierFinalizer => _FrostIdentifierFinalizer;
  late final OpaqueTypeFinalizer _KeyShareDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_KeyShareDataPtr);
  OpaqueTypeFinalizer get KeyShareDataFinalizer => _KeyShareDataFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_DkgRound1Package(DkgRound1Package apiObj, wire_DkgRound1Package wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DkgRound1SecretPackage(DkgRound1SecretPackage apiObj, wire_DkgRound1SecretPackage wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DkgRound2Package(DkgRound2Package apiObj, wire_DkgRound2Package wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DkgRound2SecretPackage(DkgRound2SecretPackage apiObj, wire_DkgRound2SecretPackage wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_FrostIdentifier(FrostIdentifier apiObj, wire_FrostIdentifier wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_dkg_commitment_for_identifier(DkgCommitmentForIdentifier apiObj, wire_DkgCommitmentForIdentifier wireObj) {
    wireObj.identifier = api2wire_FrostIdentifier(apiObj.identifier);
    wireObj.commitment = api2wire_DkgRound1Package(apiObj.commitment);
  }

  void _api_fill_to_wire_dkg_round_2_identifier_and_share(DkgRound2IdentifierAndShare apiObj, wire_DkgRound2IdentifierAndShare wireObj) {
    wireObj.identifier = api2wire_FrostIdentifier(apiObj.identifier);
    wireObj.secret = api2wire_DkgRound2Package(apiObj.secret);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class FrostyRustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FrostyRustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FrostyRustWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturn wire_identifier_from_string(
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_identifier_from_string(
      s,
    );
  }

  late final _wire_identifier_from_stringPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_identifier_from_string');
  late final _wire_identifier_from_string = _wire_identifier_from_stringPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_identifier_from_u16(
    int i,
  ) {
    return _wire_identifier_from_u16(
      i,
    );
  }

  late final _wire_identifier_from_u16Ptr = _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Uint16)>>('wire_identifier_from_u16');
  late final _wire_identifier_from_u16 = _wire_identifier_from_u16Ptr.asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_identifier_from_bytes(
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_identifier_from_bytes(
      bytes,
    );
  }

  late final _wire_identifier_from_bytesPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_identifier_from_bytes');
  late final _wire_identifier_from_bytes = _wire_identifier_from_bytesPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_identifier_to_bytes(
    wire_FrostIdentifier identifier,
  ) {
    return _wire_identifier_to_bytes(
      identifier,
    );
  }

  late final _wire_identifier_to_bytesPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_FrostIdentifier)>>('wire_identifier_to_bytes');
  late final _wire_identifier_to_bytes = _wire_identifier_to_bytesPtr.asFunction<WireSyncReturn Function(wire_FrostIdentifier)>();

  WireSyncReturn wire_dkg_part_1(
    wire_FrostIdentifier identifier,
    int max_signers,
    int min_signers,
  ) {
    return _wire_dkg_part_1(
      identifier,
      max_signers,
      min_signers,
    );
  }

  late final _wire_dkg_part_1Ptr = _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_FrostIdentifier, ffi.Uint16, ffi.Uint16)>>('wire_dkg_part_1');
  late final _wire_dkg_part_1 = _wire_dkg_part_1Ptr.asFunction<WireSyncReturn Function(wire_FrostIdentifier, int, int)>();

  WireSyncReturn wire_public_commitment_from_bytes(
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_public_commitment_from_bytes(
      bytes,
    );
  }

  late final _wire_public_commitment_from_bytesPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_public_commitment_from_bytes');
  late final _wire_public_commitment_from_bytes = _wire_public_commitment_from_bytesPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_public_commitment_to_bytes(
    wire_DkgRound1Package commitment,
  ) {
    return _wire_public_commitment_to_bytes(
      commitment,
    );
  }

  late final _wire_public_commitment_to_bytesPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DkgRound1Package)>>('wire_public_commitment_to_bytes');
  late final _wire_public_commitment_to_bytes = _wire_public_commitment_to_bytesPtr.asFunction<WireSyncReturn Function(wire_DkgRound1Package)>();

  WireSyncReturn wire_dkg_part_2(
    wire_DkgRound1SecretPackage round_1_secret,
    ffi.Pointer<wire_list_dkg_commitment_for_identifier> round_1_commitments,
  ) {
    return _wire_dkg_part_2(
      round_1_secret,
      round_1_commitments,
    );
  }

  late final _wire_dkg_part_2Ptr = _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DkgRound1SecretPackage, ffi.Pointer<wire_list_dkg_commitment_for_identifier>)>>('wire_dkg_part_2');
  late final _wire_dkg_part_2 = _wire_dkg_part_2Ptr.asFunction<WireSyncReturn Function(wire_DkgRound1SecretPackage, ffi.Pointer<wire_list_dkg_commitment_for_identifier>)>();

  WireSyncReturn wire_share_to_give_from_bytes(
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_share_to_give_from_bytes(
      bytes,
    );
  }

  late final _wire_share_to_give_from_bytesPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_share_to_give_from_bytes');
  late final _wire_share_to_give_from_bytes = _wire_share_to_give_from_bytesPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_share_to_give_to_bytes(
    wire_DkgRound2Package share,
  ) {
    return _wire_share_to_give_to_bytes(
      share,
    );
  }

  late final _wire_share_to_give_to_bytesPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DkgRound2Package)>>('wire_share_to_give_to_bytes');
  late final _wire_share_to_give_to_bytes = _wire_share_to_give_to_bytesPtr.asFunction<WireSyncReturn Function(wire_DkgRound2Package)>();

  WireSyncReturn wire_dkg_part_3(
    wire_DkgRound2SecretPackage round_2_secret,
    ffi.Pointer<wire_list_dkg_commitment_for_identifier> round_1_commitments,
    ffi.Pointer<wire_list_dkg_round_2_identifier_and_share> round_2_shares,
  ) {
    return _wire_dkg_part_3(
      round_2_secret,
      round_1_commitments,
      round_2_shares,
    );
  }

  late final _wire_dkg_part_3Ptr = _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DkgRound2SecretPackage, ffi.Pointer<wire_list_dkg_commitment_for_identifier>, ffi.Pointer<wire_list_dkg_round_2_identifier_and_share>)>>('wire_dkg_part_3');
  late final _wire_dkg_part_3 = _wire_dkg_part_3Ptr.asFunction<WireSyncReturn Function(wire_DkgRound2SecretPackage, ffi.Pointer<wire_list_dkg_commitment_for_identifier>, ffi.Pointer<wire_list_dkg_round_2_identifier_and_share>)>();

  wire_DkgRound1Package new_DkgRound1Package() {
    return _new_DkgRound1Package();
  }

  late final _new_DkgRound1PackagePtr = _lookup<ffi.NativeFunction<wire_DkgRound1Package Function()>>('new_DkgRound1Package');
  late final _new_DkgRound1Package = _new_DkgRound1PackagePtr.asFunction<wire_DkgRound1Package Function()>();

  wire_DkgRound1SecretPackage new_DkgRound1SecretPackage() {
    return _new_DkgRound1SecretPackage();
  }

  late final _new_DkgRound1SecretPackagePtr = _lookup<ffi.NativeFunction<wire_DkgRound1SecretPackage Function()>>('new_DkgRound1SecretPackage');
  late final _new_DkgRound1SecretPackage = _new_DkgRound1SecretPackagePtr.asFunction<wire_DkgRound1SecretPackage Function()>();

  wire_DkgRound2Package new_DkgRound2Package() {
    return _new_DkgRound2Package();
  }

  late final _new_DkgRound2PackagePtr = _lookup<ffi.NativeFunction<wire_DkgRound2Package Function()>>('new_DkgRound2Package');
  late final _new_DkgRound2Package = _new_DkgRound2PackagePtr.asFunction<wire_DkgRound2Package Function()>();

  wire_DkgRound2SecretPackage new_DkgRound2SecretPackage() {
    return _new_DkgRound2SecretPackage();
  }

  late final _new_DkgRound2SecretPackagePtr = _lookup<ffi.NativeFunction<wire_DkgRound2SecretPackage Function()>>('new_DkgRound2SecretPackage');
  late final _new_DkgRound2SecretPackage = _new_DkgRound2SecretPackagePtr.asFunction<wire_DkgRound2SecretPackage Function()>();

  wire_FrostIdentifier new_FrostIdentifier() {
    return _new_FrostIdentifier();
  }

  late final _new_FrostIdentifierPtr = _lookup<ffi.NativeFunction<wire_FrostIdentifier Function()>>('new_FrostIdentifier');
  late final _new_FrostIdentifier = _new_FrostIdentifierPtr.asFunction<wire_FrostIdentifier Function()>();

  ffi.Pointer<wire_list_dkg_commitment_for_identifier> new_list_dkg_commitment_for_identifier_0(
    int len,
  ) {
    return _new_list_dkg_commitment_for_identifier_0(
      len,
    );
  }

  late final _new_list_dkg_commitment_for_identifier_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_dkg_commitment_for_identifier> Function(ffi.Int32)>>('new_list_dkg_commitment_for_identifier_0');
  late final _new_list_dkg_commitment_for_identifier_0 = _new_list_dkg_commitment_for_identifier_0Ptr.asFunction<ffi.Pointer<wire_list_dkg_commitment_for_identifier> Function(int)>();

  ffi.Pointer<wire_list_dkg_round_2_identifier_and_share> new_list_dkg_round_2_identifier_and_share_0(
    int len,
  ) {
    return _new_list_dkg_round_2_identifier_and_share_0(
      len,
    );
  }

  late final _new_list_dkg_round_2_identifier_and_share_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_dkg_round_2_identifier_and_share> Function(ffi.Int32)>>('new_list_dkg_round_2_identifier_and_share_0');
  late final _new_list_dkg_round_2_identifier_and_share_0 = _new_list_dkg_round_2_identifier_and_share_0Ptr.asFunction<ffi.Pointer<wire_list_dkg_round_2_identifier_and_share> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_DkgRound1Package(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_DkgRound1Package(
      ptr,
    );
  }

  late final _drop_opaque_DkgRound1PackagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_DkgRound1Package');
  late final _drop_opaque_DkgRound1Package = _drop_opaque_DkgRound1PackagePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_DkgRound1Package(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_DkgRound1Package(
      ptr,
    );
  }

  late final _share_opaque_DkgRound1PackagePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_DkgRound1Package');
  late final _share_opaque_DkgRound1Package = _share_opaque_DkgRound1PackagePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_DkgRound1SecretPackage(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_DkgRound1SecretPackage(
      ptr,
    );
  }

  late final _drop_opaque_DkgRound1SecretPackagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_DkgRound1SecretPackage');
  late final _drop_opaque_DkgRound1SecretPackage = _drop_opaque_DkgRound1SecretPackagePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_DkgRound1SecretPackage(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_DkgRound1SecretPackage(
      ptr,
    );
  }

  late final _share_opaque_DkgRound1SecretPackagePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_DkgRound1SecretPackage');
  late final _share_opaque_DkgRound1SecretPackage = _share_opaque_DkgRound1SecretPackagePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_DkgRound2Package(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_DkgRound2Package(
      ptr,
    );
  }

  late final _drop_opaque_DkgRound2PackagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_DkgRound2Package');
  late final _drop_opaque_DkgRound2Package = _drop_opaque_DkgRound2PackagePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_DkgRound2Package(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_DkgRound2Package(
      ptr,
    );
  }

  late final _share_opaque_DkgRound2PackagePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_DkgRound2Package');
  late final _share_opaque_DkgRound2Package = _share_opaque_DkgRound2PackagePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_DkgRound2SecretPackage(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_DkgRound2SecretPackage(
      ptr,
    );
  }

  late final _drop_opaque_DkgRound2SecretPackagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_DkgRound2SecretPackage');
  late final _drop_opaque_DkgRound2SecretPackage = _drop_opaque_DkgRound2SecretPackagePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_DkgRound2SecretPackage(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_DkgRound2SecretPackage(
      ptr,
    );
  }

  late final _share_opaque_DkgRound2SecretPackagePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_DkgRound2SecretPackage');
  late final _share_opaque_DkgRound2SecretPackage = _share_opaque_DkgRound2SecretPackagePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrostIdentifier(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrostIdentifier(
      ptr,
    );
  }

  late final _drop_opaque_FrostIdentifierPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_FrostIdentifier');
  late final _drop_opaque_FrostIdentifier = _drop_opaque_FrostIdentifierPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FrostIdentifier(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrostIdentifier(
      ptr,
    );
  }

  late final _share_opaque_FrostIdentifierPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_FrostIdentifier');
  late final _share_opaque_FrostIdentifier = _share_opaque_FrostIdentifierPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_KeyShareData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_KeyShareData(
      ptr,
    );
  }

  late final _drop_opaque_KeyShareDataPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_KeyShareData');
  late final _drop_opaque_KeyShareData = _drop_opaque_KeyShareDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_KeyShareData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_KeyShareData(
      ptr,
    );
  }

  late final _share_opaque_KeyShareDataPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_KeyShareData');
  late final _share_opaque_KeyShareData = _share_opaque_KeyShareDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_FrostIdentifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DkgRound1Package extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DkgRound1SecretPackage extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DkgCommitmentForIdentifier extends ffi.Struct {
  external wire_FrostIdentifier identifier;

  external wire_DkgRound1Package commitment;
}

final class wire_list_dkg_commitment_for_identifier extends ffi.Struct {
  external ffi.Pointer<wire_DkgCommitmentForIdentifier> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DkgRound2Package extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DkgRound2SecretPackage extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DkgRound2IdentifierAndShare extends ffi.Struct {
  external wire_FrostIdentifier identifier;

  external wire_DkgRound2Package secret;
}

final class wire_list_dkg_round_2_identifier_and_share extends ffi.Struct {
  external ffi.Pointer<wire_DkgRound2IdentifierAndShare> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
