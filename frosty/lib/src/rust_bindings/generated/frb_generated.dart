// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/main.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.28';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frosty_rust',
    ioDirectory: '../native/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Uint8List aggregateSignature(
      {required List<IdentifierAndSigningCommitment> nonceCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required List<IdentifierAndSignatureShare> shares,
      required List<int> groupPk,
      required List<IdentifierAndPublicShare> publicShares,
      dynamic hint});

  (DkgRound1SecretPackage, DkgRound1Package) dkgPart1(
      {required FrostIdentifier identifier,
      required int maxSigners,
      required int minSigners,
      dynamic hint});

  (DkgRound2SecretPackage, List<DkgRound2IdentifierAndShare>) dkgPart2(
      {required DkgRound1SecretPackage round1Secret,
      required List<DkgCommitmentForIdentifier> round1Commitments,
      dynamic hint});

  DkgRound3Data dkgPart3(
      {required DkgRound2SecretPackage round2Secret,
      required List<DkgCommitmentForIdentifier> round1Commitments,
      required List<DkgRound2IdentifierAndShare> round2Shares,
      dynamic hint});

  FrostIdentifier identifierFromBytes({required List<int> bytes, dynamic hint});

  FrostIdentifier identifierFromString({required String s, dynamic hint});

  FrostIdentifier identifierFromU16({required int i, dynamic hint});

  Uint8List identifierToBytes(
      {required FrostIdentifier identifier, dynamic hint});

  DkgRound1Package publicCommitmentFromBytes(
      {required List<int> bytes, dynamic hint});

  Uint8List publicCommitmentToBytes(
      {required DkgRound1Package commitment, dynamic hint});

  DkgRound2Package shareToGiveFromBytes(
      {required List<int> bytes, dynamic hint});

  Uint8List shareToGiveToBytes({required DkgRound2Package share, dynamic hint});

  (FrostRound1SigningNonces, FrostRound1SigningCommitments) signPart1(
      {required List<int> privateShare, dynamic hint});

  FrostRound2SignatureShare signPart2(
      {required List<IdentifierAndSigningCommitment> nonceCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required FrostRound1SigningNonces signingNonce,
      required FrostIdentifier identifier,
      required List<int> privateShare,
      required List<int> groupPk,
      required int threshold,
      dynamic hint});

  FrostRound2SignatureShare signatureShareFromBytes(
      {required List<int> bytes, dynamic hint});

  Uint8List signatureShareToBytes(
      {required FrostRound2SignatureShare share, dynamic hint});

  FrostRound1SigningCommitments signingCommitmentFromBytes(
      {required List<int> bytes, dynamic hint});

  Uint8List signingCommitmentToBytes(
      {required FrostRound1SigningCommitments commitment, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound1Package;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound1Package;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound1PackagePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound1SecretPackage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound1SecretPackage;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound1SecretPackagePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound2Package;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound2Package;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound2PackagePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound2SecretPackage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound2SecretPackage;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound2SecretPackagePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostIdentifier;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostIdentifier;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrostIdentifierPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostRound1SigningCommitments;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostRound1SigningCommitments;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrostRound1SigningCommitmentsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostRound1SigningNonces;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostRound1SigningNonces;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrostRound1SigningNoncesPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostRound2SignatureShare;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostRound2SignatureShare;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrostRound2SignatureSharePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Uint8List aggregateSignature(
      {required List<IdentifierAndSigningCommitment> nonceCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required List<IdentifierAndSignatureShare> shares,
      required List<int> groupPk,
      required List<IdentifierAndPublicShare> publicShares,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_identifier_and_signing_commitment(
            nonceCommitments, serializer);
        sse_encode_list_prim_u_8_loose(message, serializer);
        sse_encode_opt_list_prim_u_8_strict(merkleRoot, serializer);
        sse_encode_list_identifier_and_signature_share(shares, serializer);
        sse_encode_list_prim_u_8_loose(groupPk, serializer);
        sse_encode_list_identifier_and_public_share(publicShares, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kAggregateSignatureConstMeta,
      argValues: [
        nonceCommitments,
        message,
        merkleRoot,
        shares,
        groupPk,
        publicShares
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAggregateSignatureConstMeta => const TaskConstMeta(
        debugName: "aggregate_signature",
        argNames: [
          "nonceCommitments",
          "message",
          "merkleRoot",
          "shares",
          "groupPk",
          "publicShares"
        ],
      );

  @override
  (DkgRound1SecretPackage, DkgRound1Package) dkgPart1(
      {required FrostIdentifier identifier,
      required int maxSigners,
      required int minSigners,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_frostIdentifier(identifier, serializer);
        sse_encode_u_16(maxSigners, serializer);
        sse_encode_u_16(minSigners, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_rust_opaque_dkground_1_secret_package_rust_opaque_dkground_1_package,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDkgPart1ConstMeta,
      argValues: [identifier, maxSigners, minSigners],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDkgPart1ConstMeta => const TaskConstMeta(
        debugName: "dkg_part_1",
        argNames: ["identifier", "maxSigners", "minSigners"],
      );

  @override
  (DkgRound2SecretPackage, List<DkgRound2IdentifierAndShare>) dkgPart2(
      {required DkgRound1SecretPackage round1Secret,
      required List<DkgCommitmentForIdentifier> round1Commitments,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_dkground1SecretPackage(round1Secret, serializer);
        sse_encode_list_dkg_commitment_for_identifier(
            round1Commitments, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_rust_opaque_dkground_2_secret_package_list_dkg_round_2_identifier_and_share,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDkgPart2ConstMeta,
      argValues: [round1Secret, round1Commitments],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDkgPart2ConstMeta => const TaskConstMeta(
        debugName: "dkg_part_2",
        argNames: ["round1Secret", "round1Commitments"],
      );

  @override
  DkgRound3Data dkgPart3(
      {required DkgRound2SecretPackage round2Secret,
      required List<DkgCommitmentForIdentifier> round1Commitments,
      required List<DkgRound2IdentifierAndShare> round2Shares,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_dkground2SecretPackage(round2Secret, serializer);
        sse_encode_list_dkg_commitment_for_identifier(
            round1Commitments, serializer);
        sse_encode_list_dkg_round_2_identifier_and_share(
            round2Shares, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dkg_round_3_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDkgPart3ConstMeta,
      argValues: [round2Secret, round1Commitments, round2Shares],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDkgPart3ConstMeta => const TaskConstMeta(
        debugName: "dkg_part_3",
        argNames: ["round2Secret", "round1Commitments", "round2Shares"],
      );

  @override
  FrostIdentifier identifierFromBytes(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostIdentifier,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kIdentifierFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIdentifierFromBytesConstMeta => const TaskConstMeta(
        debugName: "identifier_from_bytes",
        argNames: ["bytes"],
      );

  @override
  FrostIdentifier identifierFromString({required String s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostIdentifier,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kIdentifierFromStringConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIdentifierFromStringConstMeta => const TaskConstMeta(
        debugName: "identifier_from_string",
        argNames: ["s"],
      );

  @override
  FrostIdentifier identifierFromU16({required int i, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(i, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostIdentifier,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kIdentifierFromU16ConstMeta,
      argValues: [i],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIdentifierFromU16ConstMeta => const TaskConstMeta(
        debugName: "identifier_from_u16",
        argNames: ["i"],
      );

  @override
  Uint8List identifierToBytes(
      {required FrostIdentifier identifier, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_frostIdentifier(identifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kIdentifierToBytesConstMeta,
      argValues: [identifier],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIdentifierToBytesConstMeta => const TaskConstMeta(
        debugName: "identifier_to_bytes",
        argNames: ["identifier"],
      );

  @override
  DkgRound1Package publicCommitmentFromBytes(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_dkground1Package,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPublicCommitmentFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPublicCommitmentFromBytesConstMeta => const TaskConstMeta(
        debugName: "public_commitment_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List publicCommitmentToBytes(
      {required DkgRound1Package commitment, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_dkground1Package(commitment, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kPublicCommitmentToBytesConstMeta,
      argValues: [commitment],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPublicCommitmentToBytesConstMeta => const TaskConstMeta(
        debugName: "public_commitment_to_bytes",
        argNames: ["commitment"],
      );

  @override
  DkgRound2Package shareToGiveFromBytes(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_dkground2Package,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kShareToGiveFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShareToGiveFromBytesConstMeta => const TaskConstMeta(
        debugName: "share_to_give_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List shareToGiveToBytes(
      {required DkgRound2Package share, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_dkground2Package(share, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kShareToGiveToBytesConstMeta,
      argValues: [share],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShareToGiveToBytesConstMeta => const TaskConstMeta(
        debugName: "share_to_give_to_bytes",
        argNames: ["share"],
      );

  @override
  (FrostRound1SigningNonces, FrostRound1SigningCommitments) signPart1(
      {required List<int> privateShare, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(privateShare, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSignPart1ConstMeta,
      argValues: [privateShare],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignPart1ConstMeta => const TaskConstMeta(
        debugName: "sign_part_1",
        argNames: ["privateShare"],
      );

  @override
  FrostRound2SignatureShare signPart2(
      {required List<IdentifierAndSigningCommitment> nonceCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required FrostRound1SigningNonces signingNonce,
      required FrostIdentifier identifier,
      required List<int> privateShare,
      required List<int> groupPk,
      required int threshold,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_identifier_and_signing_commitment(
            nonceCommitments, serializer);
        sse_encode_list_prim_u_8_loose(message, serializer);
        sse_encode_opt_list_prim_u_8_strict(merkleRoot, serializer);
        sse_encode_RustOpaque_frostround1SigningNonces(
            signingNonce, serializer);
        sse_encode_RustOpaque_frostIdentifier(identifier, serializer);
        sse_encode_list_prim_u_8_loose(privateShare, serializer);
        sse_encode_list_prim_u_8_loose(groupPk, serializer);
        sse_encode_u_16(threshold, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostround2SignatureShare,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSignPart2ConstMeta,
      argValues: [
        nonceCommitments,
        message,
        merkleRoot,
        signingNonce,
        identifier,
        privateShare,
        groupPk,
        threshold
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignPart2ConstMeta => const TaskConstMeta(
        debugName: "sign_part_2",
        argNames: [
          "nonceCommitments",
          "message",
          "merkleRoot",
          "signingNonce",
          "identifier",
          "privateShare",
          "groupPk",
          "threshold"
        ],
      );

  @override
  FrostRound2SignatureShare signatureShareFromBytes(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostround2SignatureShare,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSignatureShareFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignatureShareFromBytesConstMeta => const TaskConstMeta(
        debugName: "signature_share_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List signatureShareToBytes(
      {required FrostRound2SignatureShare share, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_frostround2SignatureShare(share, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kSignatureShareToBytesConstMeta,
      argValues: [share],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignatureShareToBytesConstMeta => const TaskConstMeta(
        debugName: "signature_share_to_bytes",
        argNames: ["share"],
      );

  @override
  FrostRound1SigningCommitments signingCommitmentFromBytes(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostround1SigningCommitments,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSigningCommitmentFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSigningCommitmentFromBytesConstMeta => const TaskConstMeta(
        debugName: "signing_commitment_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List signingCommitmentToBytes(
      {required FrostRound1SigningCommitments commitment, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_frostround1SigningCommitments(
            commitment, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSigningCommitmentToBytesConstMeta,
      argValues: [commitment],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSigningCommitmentToBytesConstMeta => const TaskConstMeta(
        debugName: "signing_commitment_to_bytes",
        argNames: ["commitment"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound1Package =>
          wire.rust_arc_increment_strong_count_RustOpaque_dkground1Package;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound1Package =>
          wire.rust_arc_decrement_strong_count_RustOpaque_dkground1Package;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound1SecretPackage => wire
          .rust_arc_increment_strong_count_RustOpaque_dkground1SecretPackage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound1SecretPackage => wire
          .rust_arc_decrement_strong_count_RustOpaque_dkground1SecretPackage;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound2Package =>
          wire.rust_arc_increment_strong_count_RustOpaque_dkground2Package;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound2Package =>
          wire.rust_arc_decrement_strong_count_RustOpaque_dkground2Package;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound2SecretPackage => wire
          .rust_arc_increment_strong_count_RustOpaque_dkground2SecretPackage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound2SecretPackage => wire
          .rust_arc_decrement_strong_count_RustOpaque_dkground2SecretPackage;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostIdentifier =>
          wire.rust_arc_increment_strong_count_RustOpaque_frostIdentifier;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostIdentifier =>
          wire.rust_arc_decrement_strong_count_RustOpaque_frostIdentifier;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostRound1SigningCommitments => wire
          .rust_arc_increment_strong_count_RustOpaque_frostround1SigningCommitments;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostRound1SigningCommitments => wire
          .rust_arc_decrement_strong_count_RustOpaque_frostround1SigningCommitments;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostRound1SigningNonces => wire
          .rust_arc_increment_strong_count_RustOpaque_frostround1SigningNonces;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostRound1SigningNonces => wire
          .rust_arc_decrement_strong_count_RustOpaque_frostround1SigningNonces;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrostRound2SignatureShare => wire
          .rust_arc_increment_strong_count_RustOpaque_frostround2SignatureShare;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrostRound2SignatureShare => wire
          .rust_arc_decrement_strong_count_RustOpaque_frostround2SignatureShare;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DkgRound1Package dco_decode_RustOpaque_dkground1Package(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound1Package.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound1SecretPackage dco_decode_RustOpaque_dkground1SecretPackage(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound1SecretPackage.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound2Package dco_decode_RustOpaque_dkground2Package(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound2Package.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound2SecretPackage dco_decode_RustOpaque_dkground2SecretPackage(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound2SecretPackage.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrostIdentifier dco_decode_RustOpaque_frostIdentifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrostIdentifier.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrostRound1SigningCommitments
      dco_decode_RustOpaque_frostround1SigningCommitments(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrostRound1SigningCommitments.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrostRound1SigningNonces dco_decode_RustOpaque_frostround1SigningNonces(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrostRound1SigningNonces.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrostRound2SignatureShare dco_decode_RustOpaque_frostround2SignatureShare(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrostRound2SignatureShare.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  DkgCommitmentForIdentifier dco_decode_dkg_commitment_for_identifier(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DkgCommitmentForIdentifier(
      identifier: dco_decode_RustOpaque_frostIdentifier(arr[0]),
      commitment: dco_decode_RustOpaque_dkground1Package(arr[1]),
    );
  }

  @protected
  DkgRound2IdentifierAndShare dco_decode_dkg_round_2_identifier_and_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DkgRound2IdentifierAndShare(
      identifier: dco_decode_RustOpaque_frostIdentifier(arr[0]),
      secret: dco_decode_RustOpaque_dkground2Package(arr[1]),
    );
  }

  @protected
  DkgRound3Data dco_decode_dkg_round_3_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DkgRound3Data(
      identifier: dco_decode_RustOpaque_frostIdentifier(arr[0]),
      privateShare: dco_decode_list_prim_u_8_strict(arr[1]),
      groupPk: dco_decode_list_prim_u_8_strict(arr[2]),
      publicKeyShares: dco_decode_list_identifier_and_public_share(arr[3]),
      threshold: dco_decode_u_16(arr[4]),
    );
  }

  @protected
  IdentifierAndPublicShare dco_decode_identifier_and_public_share(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IdentifierAndPublicShare(
      identifier: dco_decode_RustOpaque_frostIdentifier(arr[0]),
      publicShare: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  IdentifierAndSignatureShare dco_decode_identifier_and_signature_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IdentifierAndSignatureShare(
      identifier: dco_decode_RustOpaque_frostIdentifier(arr[0]),
      share: dco_decode_RustOpaque_frostround2SignatureShare(arr[1]),
    );
  }

  @protected
  IdentifierAndSigningCommitment dco_decode_identifier_and_signing_commitment(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IdentifierAndSigningCommitment(
      identifier: dco_decode_RustOpaque_frostIdentifier(arr[0]),
      commitment: dco_decode_RustOpaque_frostround1SigningCommitments(arr[1]),
    );
  }

  @protected
  List<DkgCommitmentForIdentifier>
      dco_decode_list_dkg_commitment_for_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dkg_commitment_for_identifier)
        .toList();
  }

  @protected
  List<DkgRound2IdentifierAndShare>
      dco_decode_list_dkg_round_2_identifier_and_share(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dkg_round_2_identifier_and_share)
        .toList();
  }

  @protected
  List<IdentifierAndPublicShare> dco_decode_list_identifier_and_public_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_identifier_and_public_share)
        .toList();
  }

  @protected
  List<IdentifierAndSignatureShare>
      dco_decode_list_identifier_and_signature_share(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_identifier_and_signature_share)
        .toList();
  }

  @protected
  List<IdentifierAndSigningCommitment>
      dco_decode_list_identifier_and_signing_commitment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_identifier_and_signing_commitment)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (
    DkgRound1SecretPackage,
    DkgRound1Package
  ) dco_decode_record_rust_opaque_dkground_1_secret_package_rust_opaque_dkground_1_package(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_RustOpaque_dkground1SecretPackage(arr[0]),
      dco_decode_RustOpaque_dkground1Package(arr[1]),
    );
  }

  @protected
  (
    DkgRound2SecretPackage,
    List<DkgRound2IdentifierAndShare>
  ) dco_decode_record_rust_opaque_dkground_2_secret_package_list_dkg_round_2_identifier_and_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_RustOpaque_dkground2SecretPackage(arr[0]),
      dco_decode_list_dkg_round_2_identifier_and_share(arr[1]),
    );
  }

  @protected
  (
    FrostRound1SigningNonces,
    FrostRound1SigningCommitments
  ) dco_decode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_RustOpaque_frostround1SigningNonces(arr[0]),
      dco_decode_RustOpaque_frostround1SigningCommitments(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DkgRound1Package sse_decode_RustOpaque_dkground1Package(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound1Package.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound1SecretPackage sse_decode_RustOpaque_dkground1SecretPackage(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound1SecretPackage.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound2Package sse_decode_RustOpaque_dkground2Package(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound2Package.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound2SecretPackage sse_decode_RustOpaque_dkground2SecretPackage(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound2SecretPackage.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrostIdentifier sse_decode_RustOpaque_frostIdentifier(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrostIdentifier.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrostRound1SigningCommitments
      sse_decode_RustOpaque_frostround1SigningCommitments(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrostRound1SigningCommitments.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrostRound1SigningNonces sse_decode_RustOpaque_frostround1SigningNonces(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrostRound1SigningNonces.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrostRound2SignatureShare sse_decode_RustOpaque_frostround2SignatureShare(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrostRound2SignatureShare.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  DkgCommitmentForIdentifier sse_decode_dkg_commitment_for_identifier(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_RustOpaque_frostIdentifier(deserializer);
    var var_commitment = sse_decode_RustOpaque_dkground1Package(deserializer);
    return DkgCommitmentForIdentifier(
        identifier: var_identifier, commitment: var_commitment);
  }

  @protected
  DkgRound2IdentifierAndShare sse_decode_dkg_round_2_identifier_and_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_RustOpaque_frostIdentifier(deserializer);
    var var_secret = sse_decode_RustOpaque_dkground2Package(deserializer);
    return DkgRound2IdentifierAndShare(
        identifier: var_identifier, secret: var_secret);
  }

  @protected
  DkgRound3Data sse_decode_dkg_round_3_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_RustOpaque_frostIdentifier(deserializer);
    var var_privateShare = sse_decode_list_prim_u_8_strict(deserializer);
    var var_groupPk = sse_decode_list_prim_u_8_strict(deserializer);
    var var_publicKeyShares =
        sse_decode_list_identifier_and_public_share(deserializer);
    var var_threshold = sse_decode_u_16(deserializer);
    return DkgRound3Data(
        identifier: var_identifier,
        privateShare: var_privateShare,
        groupPk: var_groupPk,
        publicKeyShares: var_publicKeyShares,
        threshold: var_threshold);
  }

  @protected
  IdentifierAndPublicShare sse_decode_identifier_and_public_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_RustOpaque_frostIdentifier(deserializer);
    var var_publicShare = sse_decode_list_prim_u_8_strict(deserializer);
    return IdentifierAndPublicShare(
        identifier: var_identifier, publicShare: var_publicShare);
  }

  @protected
  IdentifierAndSignatureShare sse_decode_identifier_and_signature_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_RustOpaque_frostIdentifier(deserializer);
    var var_share =
        sse_decode_RustOpaque_frostround2SignatureShare(deserializer);
    return IdentifierAndSignatureShare(
        identifier: var_identifier, share: var_share);
  }

  @protected
  IdentifierAndSigningCommitment sse_decode_identifier_and_signing_commitment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_RustOpaque_frostIdentifier(deserializer);
    var var_commitment =
        sse_decode_RustOpaque_frostround1SigningCommitments(deserializer);
    return IdentifierAndSigningCommitment(
        identifier: var_identifier, commitment: var_commitment);
  }

  @protected
  List<DkgCommitmentForIdentifier>
      sse_decode_list_dkg_commitment_for_identifier(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DkgCommitmentForIdentifier>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dkg_commitment_for_identifier(deserializer));
    }
    return ans_;
  }

  @protected
  List<DkgRound2IdentifierAndShare>
      sse_decode_list_dkg_round_2_identifier_and_share(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DkgRound2IdentifierAndShare>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dkg_round_2_identifier_and_share(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentifierAndPublicShare> sse_decode_list_identifier_and_public_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentifierAndPublicShare>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identifier_and_public_share(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentifierAndSignatureShare>
      sse_decode_list_identifier_and_signature_share(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentifierAndSignatureShare>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identifier_and_signature_share(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentifierAndSigningCommitment>
      sse_decode_list_identifier_and_signing_commitment(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentifierAndSigningCommitment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identifier_and_signing_commitment(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    DkgRound1SecretPackage,
    DkgRound1Package
  ) sse_decode_record_rust_opaque_dkground_1_secret_package_rust_opaque_dkground_1_package(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_dkground1SecretPackage(deserializer);
    var var_field1 = sse_decode_RustOpaque_dkground1Package(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    DkgRound2SecretPackage,
    List<DkgRound2IdentifierAndShare>
  ) sse_decode_record_rust_opaque_dkground_2_secret_package_list_dkg_round_2_identifier_and_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_dkground2SecretPackage(deserializer);
    var var_field1 =
        sse_decode_list_dkg_round_2_identifier_and_share(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    FrostRound1SigningNonces,
    FrostRound1SigningCommitments
  ) sse_decode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_frostround1SigningNonces(deserializer);
    var var_field1 =
        sse_decode_RustOpaque_frostround1SigningCommitments(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ((');
  }

  @protected
  void sse_encode_RustOpaque_dkground1Package(
      DkgRound1Package self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_dkground1SecretPackage(
      DkgRound1SecretPackage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_dkground2Package(
      DkgRound2Package self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_dkground2SecretPackage(
      DkgRound2SecretPackage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frostIdentifier(
      FrostIdentifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frostround1SigningCommitments(
      FrostRound1SigningCommitments self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frostround1SigningNonces(
      FrostRound1SigningNonces self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frostround2SignatureShare(
      FrostRound2SignatureShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_dkg_commitment_for_identifier(
      DkgCommitmentForIdentifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostIdentifier(self.identifier, serializer);
    sse_encode_RustOpaque_dkground1Package(self.commitment, serializer);
  }

  @protected
  void sse_encode_dkg_round_2_identifier_and_share(
      DkgRound2IdentifierAndShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostIdentifier(self.identifier, serializer);
    sse_encode_RustOpaque_dkground2Package(self.secret, serializer);
  }

  @protected
  void sse_encode_dkg_round_3_data(
      DkgRound3Data self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostIdentifier(self.identifier, serializer);
    sse_encode_list_prim_u_8_strict(self.privateShare, serializer);
    sse_encode_list_prim_u_8_strict(self.groupPk, serializer);
    sse_encode_list_identifier_and_public_share(
        self.publicKeyShares, serializer);
    sse_encode_u_16(self.threshold, serializer);
  }

  @protected
  void sse_encode_identifier_and_public_share(
      IdentifierAndPublicShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostIdentifier(self.identifier, serializer);
    sse_encode_list_prim_u_8_strict(self.publicShare, serializer);
  }

  @protected
  void sse_encode_identifier_and_signature_share(
      IdentifierAndSignatureShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostIdentifier(self.identifier, serializer);
    sse_encode_RustOpaque_frostround2SignatureShare(self.share, serializer);
  }

  @protected
  void sse_encode_identifier_and_signing_commitment(
      IdentifierAndSigningCommitment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostIdentifier(self.identifier, serializer);
    sse_encode_RustOpaque_frostround1SigningCommitments(
        self.commitment, serializer);
  }

  @protected
  void sse_encode_list_dkg_commitment_for_identifier(
      List<DkgCommitmentForIdentifier> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dkg_commitment_for_identifier(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dkg_round_2_identifier_and_share(
      List<DkgRound2IdentifierAndShare> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dkg_round_2_identifier_and_share(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identifier_and_public_share(
      List<IdentifierAndPublicShare> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identifier_and_public_share(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identifier_and_signature_share(
      List<IdentifierAndSignatureShare> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identifier_and_signature_share(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identifier_and_signing_commitment(
      List<IdentifierAndSigningCommitment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identifier_and_signing_commitment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void
      sse_encode_record_rust_opaque_dkground_1_secret_package_rust_opaque_dkground_1_package(
          (DkgRound1SecretPackage, DkgRound1Package) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_dkground1SecretPackage(self.$1, serializer);
    sse_encode_RustOpaque_dkground1Package(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_rust_opaque_dkground_2_secret_package_list_dkg_round_2_identifier_and_share(
          (DkgRound2SecretPackage, List<DkgRound2IdentifierAndShare>) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_dkground2SecretPackage(self.$1, serializer);
    sse_encode_list_dkg_round_2_identifier_and_share(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments(
          (FrostRound1SigningNonces, FrostRound1SigningCommitments) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostround1SigningNonces(self.$1, serializer);
    sse_encode_RustOpaque_frostround1SigningCommitments(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
