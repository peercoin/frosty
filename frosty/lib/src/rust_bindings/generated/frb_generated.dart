// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/main.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => 996469473;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frosty_rust',
    ioDirectory: '../native/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Uint8List crateApiMainDkgRound3DataAutoAccessorGetGroupPk(
      {required DkgRound3Data that});

  IdentifierOpaque crateApiMainDkgRound3DataAutoAccessorGetIdentifier(
      {required DkgRound3Data that});

  Uint8List crateApiMainDkgRound3DataAutoAccessorGetPrivateShare(
      {required DkgRound3Data that});

  List<IdentifierAndPublicShare>
      crateApiMainDkgRound3DataAutoAccessorGetPublicKeyShares(
          {required DkgRound3Data that});

  int crateApiMainDkgRound3DataAutoAccessorGetThreshold(
      {required DkgRound3Data that});

  void crateApiMainDkgRound3DataAutoAccessorSetGroupPk(
      {required DkgRound3Data that, required Uint8List groupPk});

  void crateApiMainDkgRound3DataAutoAccessorSetIdentifier(
      {required DkgRound3Data that, required IdentifierOpaque identifier});

  void crateApiMainDkgRound3DataAutoAccessorSetPrivateShare(
      {required DkgRound3Data that, required Uint8List privateShare});

  void crateApiMainDkgRound3DataAutoAccessorSetPublicKeyShares(
      {required DkgRound3Data that,
      required List<IdentifierAndPublicShare> publicKeyShares});

  void crateApiMainDkgRound3DataAutoAccessorSetThreshold(
      {required DkgRound3Data that, required int threshold});

  Uint8List crateApiMainAggregateSignature(
      {required List<IdentifierAndSigningCommitment> noncesCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required List<IdentifierAndSignatureShare> shares,
      required List<int> groupPk,
      required List<IdentifierAndPublicShare> publicShares});

  DkgCommitmentForIdentifier crateApiMainDkgCommitmentForIdentifierFromRefs(
      {required IdentifierOpaque identifier,
      required DkgPublicCommitmentOpaque commitment});

  (DkgRound1SecretOpaque, DkgPublicCommitmentOpaque) crateApiMainDkgPart1(
      {required IdentifierOpaque identifier,
      required int maxSigners,
      required int minSigners});

  (DkgRound2SecretOpaque, List<DkgRound2IdentifierAndShare>)
      crateApiMainDkgPart2(
          {required DkgRound1SecretOpaque round1Secret,
          required List<DkgCommitmentForIdentifier> round1Commitments});

  DkgRound3Data crateApiMainDkgPart3(
      {required DkgRound2SecretOpaque round2Secret,
      required List<DkgCommitmentForIdentifier> round1Commitments,
      required List<DkgRound2IdentifierAndShare> round2Shares});

  DkgRound2IdentifierAndShare crateApiMainDkgRound2IdentifierAndShareFromRefs(
      {required IdentifierOpaque identifier,
      required DkgShareToGiveOpaque secret});

  IdentifierAndPublicShare crateApiMainIdentifierAndPublicShareFromRef(
      {required IdentifierOpaque identifier, required List<int> publicShare});

  IdentifierAndSignatureShare crateApiMainIdentifierAndSignatureShareFromRefs(
      {required IdentifierOpaque identifier,
      required SignatureShareOpaque share});

  IdentifierAndSigningCommitment
      crateApiMainIdentifierAndSigningCommitmentFromRefs(
          {required IdentifierOpaque identifier,
          required SigningCommitments commitment});

  IdentifierOpaque crateApiMainIdentifierFromBytes({required List<int> bytes});

  IdentifierOpaque crateApiMainIdentifierFromString({required String s});

  IdentifierOpaque crateApiMainIdentifierFromU16({required int i});

  Uint8List crateApiMainIdentifierToBytes(
      {required IdentifierOpaque identifier});

  DkgPublicCommitmentOpaque crateApiMainPublicCommitmentFromBytes(
      {required List<int> bytes});

  Uint8List crateApiMainPublicCommitmentToBytes(
      {required DkgPublicCommitmentOpaque commitment});

  DkgShareToGiveOpaque crateApiMainShareToGiveFromBytes(
      {required List<int> bytes});

  Uint8List crateApiMainShareToGiveToBytes(
      {required DkgShareToGiveOpaque share});

  (SigningNonces, SigningCommitments) crateApiMainSignPart1(
      {required List<int> privateShare});

  SignatureShareOpaque crateApiMainSignPart2(
      {required List<IdentifierAndSigningCommitment> noncesCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required SigningNonces signingNonces,
      required IdentifierOpaque identifier,
      required List<int> privateShare,
      required List<int> groupPk,
      required int threshold});

  SignatureShareOpaque crateApiMainSignatureShareFromBytes(
      {required List<int> bytes});

  Uint8List crateApiMainSignatureShareToBytes(
      {required SignatureShareOpaque share});

  SigningCommitments crateApiMainSigningCommitmentFromBytes(
      {required List<int> bytes});

  Uint8List crateApiMainSigningCommitmentToBytes(
      {required SigningCommitments commitment});

  SigningNonces crateApiMainSigningNoncesFromBytes({required List<int> bytes});

  Uint8List crateApiMainSigningNoncesToBytes({required SigningNonces nonces});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgPublicCommitmentOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgPublicCommitmentOpaque;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgPublicCommitmentOpaquePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound1SecretOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound1SecretOpaque;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound1SecretOpaquePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound2SecretOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound2SecretOpaque;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound2SecretOpaquePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound3Data;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound3Data;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgRound3DataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgShareToGiveOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgShareToGiveOpaque;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DkgShareToGiveOpaquePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IdentifierOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IdentifierOpaque;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_IdentifierOpaquePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignatureShareOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignatureShareOpaque;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SignatureShareOpaquePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SigningCommitments;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SigningCommitments;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SigningCommitmentsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SigningNonces;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SigningNonces;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SigningNoncesPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Uint8List crateApiMainDkgRound3DataAutoAccessorGetGroupPk(
      {required DkgRound3Data that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorGetGroupPkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgRound3DataAutoAccessorGetGroupPkConstMeta =>
      const TaskConstMeta(
        debugName: "DkgRound3Data_auto_accessor_get_group_pk",
        argNames: ["that"],
      );

  @override
  IdentifierOpaque crateApiMainDkgRound3DataAutoAccessorGetIdentifier(
      {required DkgRound3Data that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorGetIdentifierConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorGetIdentifierConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_get_identifier",
            argNames: ["that"],
          );

  @override
  Uint8List crateApiMainDkgRound3DataAutoAccessorGetPrivateShare(
      {required DkgRound3Data that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorGetPrivateShareConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorGetPrivateShareConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_get_private_share",
            argNames: ["that"],
          );

  @override
  List<IdentifierAndPublicShare>
      crateApiMainDkgRound3DataAutoAccessorGetPublicKeyShares(
          {required DkgRound3Data that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_identifier_and_public_share,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMainDkgRound3DataAutoAccessorGetPublicKeySharesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorGetPublicKeySharesConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_get_public_key_shares",
            argNames: ["that"],
          );

  @override
  int crateApiMainDkgRound3DataAutoAccessorGetThreshold(
      {required DkgRound3Data that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorGetThresholdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorGetThresholdConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_get_threshold",
            argNames: ["that"],
          );

  @override
  void crateApiMainDkgRound3DataAutoAccessorSetGroupPk(
      {required DkgRound3Data that, required Uint8List groupPk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        sse_encode_list_prim_u_8_strict(groupPk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorSetGroupPkConstMeta,
      argValues: [that, groupPk],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgRound3DataAutoAccessorSetGroupPkConstMeta =>
      const TaskConstMeta(
        debugName: "DkgRound3Data_auto_accessor_set_group_pk",
        argNames: ["that", "groupPk"],
      );

  @override
  void crateApiMainDkgRound3DataAutoAccessorSetIdentifier(
      {required DkgRound3Data that, required IdentifierOpaque identifier}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorSetIdentifierConstMeta,
      argValues: [that, identifier],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorSetIdentifierConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_set_identifier",
            argNames: ["that", "identifier"],
          );

  @override
  void crateApiMainDkgRound3DataAutoAccessorSetPrivateShare(
      {required DkgRound3Data that, required Uint8List privateShare}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        sse_encode_list_prim_u_8_strict(privateShare, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorSetPrivateShareConstMeta,
      argValues: [that, privateShare],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorSetPrivateShareConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_set_private_share",
            argNames: ["that", "privateShare"],
          );

  @override
  void crateApiMainDkgRound3DataAutoAccessorSetPublicKeyShares(
      {required DkgRound3Data that,
      required List<IdentifierAndPublicShare> publicKeyShares}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        sse_encode_list_identifier_and_public_share(
            publicKeyShares, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMainDkgRound3DataAutoAccessorSetPublicKeySharesConstMeta,
      argValues: [that, publicKeyShares],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorSetPublicKeySharesConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_set_public_key_shares",
            argNames: ["that", "publicKeyShares"],
          );

  @override
  void crateApiMainDkgRound3DataAutoAccessorSetThreshold(
      {required DkgRound3Data that, required int threshold}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
            that, serializer);
        sse_encode_u_16(threshold, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound3DataAutoAccessorSetThresholdConstMeta,
      argValues: [that, threshold],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainDkgRound3DataAutoAccessorSetThresholdConstMeta =>
          const TaskConstMeta(
            debugName: "DkgRound3Data_auto_accessor_set_threshold",
            argNames: ["that", "threshold"],
          );

  @override
  Uint8List crateApiMainAggregateSignature(
      {required List<IdentifierAndSigningCommitment> noncesCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required List<IdentifierAndSignatureShare> shares,
      required List<int> groupPk,
      required List<IdentifierAndPublicShare> publicShares}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_identifier_and_signing_commitment(
            noncesCommitments, serializer);
        sse_encode_list_prim_u_8_loose(message, serializer);
        sse_encode_opt_list_prim_u_8_strict(merkleRoot, serializer);
        sse_encode_list_identifier_and_signature_share(shares, serializer);
        sse_encode_list_prim_u_8_loose(groupPk, serializer);
        sse_encode_list_identifier_and_public_share(publicShares, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_sign_aggregation_error,
      ),
      constMeta: kCrateApiMainAggregateSignatureConstMeta,
      argValues: [
        noncesCommitments,
        message,
        merkleRoot,
        shares,
        groupPk,
        publicShares
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainAggregateSignatureConstMeta =>
      const TaskConstMeta(
        debugName: "aggregate_signature",
        argNames: [
          "noncesCommitments",
          "message",
          "merkleRoot",
          "shares",
          "groupPk",
          "publicShares"
        ],
      );

  @override
  DkgCommitmentForIdentifier crateApiMainDkgCommitmentForIdentifierFromRefs(
      {required IdentifierOpaque identifier,
      required DkgPublicCommitmentOpaque commitment}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
            commitment, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dkg_commitment_for_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgCommitmentForIdentifierFromRefsConstMeta,
      argValues: [identifier, commitment],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgCommitmentForIdentifierFromRefsConstMeta =>
      const TaskConstMeta(
        debugName: "dkg_commitment_for_identifier_from_refs",
        argNames: ["identifier", "commitment"],
      );

  @override
  (DkgRound1SecretOpaque, DkgPublicCommitmentOpaque) crateApiMainDkgPart1(
      {required IdentifierOpaque identifier,
      required int maxSigners,
      required int minSigners}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_u_16(maxSigners, serializer);
        sse_encode_u_16(minSigners, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_1_secret_opaque_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_public_commitment_opaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainDkgPart1ConstMeta,
      argValues: [identifier, maxSigners, minSigners],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgPart1ConstMeta => const TaskConstMeta(
        debugName: "dkg_part_1",
        argNames: ["identifier", "maxSigners", "minSigners"],
      );

  @override
  (DkgRound2SecretOpaque, List<DkgRound2IdentifierAndShare>)
      crateApiMainDkgPart2(
          {required DkgRound1SecretOpaque round1Secret,
          required List<DkgCommitmentForIdentifier> round1Commitments}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
            round1Secret, serializer);
        sse_encode_list_dkg_commitment_for_identifier(
            round1Commitments, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_2_secret_opaque_list_dkg_round_2_identifier_and_share,
        decodeErrorData: sse_decode_dkg_round_2_error,
      ),
      constMeta: kCrateApiMainDkgPart2ConstMeta,
      argValues: [round1Secret, round1Commitments],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgPart2ConstMeta => const TaskConstMeta(
        debugName: "dkg_part_2",
        argNames: ["round1Secret", "round1Commitments"],
      );

  @override
  DkgRound3Data crateApiMainDkgPart3(
      {required DkgRound2SecretOpaque round2Secret,
      required List<DkgCommitmentForIdentifier> round1Commitments,
      required List<DkgRound2IdentifierAndShare> round2Shares}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
            round2Secret, serializer);
        sse_encode_list_dkg_commitment_for_identifier(
            round1Commitments, serializer);
        sse_encode_list_dkg_round_2_identifier_and_share(
            round2Shares, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainDkgPart3ConstMeta,
      argValues: [round2Secret, round1Commitments, round2Shares],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgPart3ConstMeta => const TaskConstMeta(
        debugName: "dkg_part_3",
        argNames: ["round2Secret", "round1Commitments", "round2Shares"],
      );

  @override
  DkgRound2IdentifierAndShare crateApiMainDkgRound2IdentifierAndShareFromRefs(
      {required IdentifierOpaque identifier,
      required DkgShareToGiveOpaque secret}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
            secret, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dkg_round_2_identifier_and_share,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainDkgRound2IdentifierAndShareFromRefsConstMeta,
      argValues: [identifier, secret],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainDkgRound2IdentifierAndShareFromRefsConstMeta =>
      const TaskConstMeta(
        debugName: "dkg_round_2_identifier_and_share_from_refs",
        argNames: ["identifier", "secret"],
      );

  @override
  IdentifierAndPublicShare crateApiMainIdentifierAndPublicShareFromRef(
      {required IdentifierOpaque identifier, required List<int> publicShare}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_list_prim_u_8_loose(publicShare, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier_and_public_share,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainIdentifierAndPublicShareFromRefConstMeta,
      argValues: [identifier, publicShare],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainIdentifierAndPublicShareFromRefConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_and_public_share_from_ref",
        argNames: ["identifier", "publicShare"],
      );

  @override
  IdentifierAndSignatureShare crateApiMainIdentifierAndSignatureShareFromRefs(
      {required IdentifierOpaque identifier,
      required SignatureShareOpaque share}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
            share, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier_and_signature_share,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainIdentifierAndSignatureShareFromRefsConstMeta,
      argValues: [identifier, share],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainIdentifierAndSignatureShareFromRefsConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_and_signature_share_from_refs",
        argNames: ["identifier", "share"],
      );

  @override
  IdentifierAndSigningCommitment
      crateApiMainIdentifierAndSigningCommitmentFromRefs(
          {required IdentifierOpaque identifier,
          required SigningCommitments commitment}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_RustOpaque_frostround1SigningCommitments(
            commitment, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier_and_signing_commitment,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainIdentifierAndSigningCommitmentFromRefsConstMeta,
      argValues: [identifier, commitment],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMainIdentifierAndSigningCommitmentFromRefsConstMeta =>
          const TaskConstMeta(
            debugName: "identifier_and_signing_commitment_from_refs",
            argNames: ["identifier", "commitment"],
          );

  @override
  IdentifierOpaque crateApiMainIdentifierFromBytes({required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainIdentifierFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainIdentifierFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_from_bytes",
        argNames: ["bytes"],
      );

  @override
  IdentifierOpaque crateApiMainIdentifierFromString({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainIdentifierFromStringConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainIdentifierFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_from_string",
        argNames: ["s"],
      );

  @override
  IdentifierOpaque crateApiMainIdentifierFromU16({required int i}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(i, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainIdentifierFromU16ConstMeta,
      argValues: [i],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainIdentifierFromU16ConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_from_u16",
        argNames: ["i"],
      );

  @override
  Uint8List crateApiMainIdentifierToBytes(
      {required IdentifierOpaque identifier}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainIdentifierToBytesConstMeta,
      argValues: [identifier],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainIdentifierToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_to_bytes",
        argNames: ["identifier"],
      );

  @override
  DkgPublicCommitmentOpaque crateApiMainPublicCommitmentFromBytes(
      {required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainPublicCommitmentFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainPublicCommitmentFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "public_commitment_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List crateApiMainPublicCommitmentToBytes(
      {required DkgPublicCommitmentOpaque commitment}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
            commitment, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainPublicCommitmentToBytesConstMeta,
      argValues: [commitment],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainPublicCommitmentToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "public_commitment_to_bytes",
        argNames: ["commitment"],
      );

  @override
  DkgShareToGiveOpaque crateApiMainShareToGiveFromBytes(
      {required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainShareToGiveFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainShareToGiveFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "share_to_give_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List crateApiMainShareToGiveToBytes(
      {required DkgShareToGiveOpaque share}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
            share, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainShareToGiveToBytesConstMeta,
      argValues: [share],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainShareToGiveToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "share_to_give_to_bytes",
        argNames: ["share"],
      );

  @override
  (SigningNonces, SigningCommitments) crateApiMainSignPart1(
      {required List<int> privateShare}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(privateShare, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSignPart1ConstMeta,
      argValues: [privateShare],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSignPart1ConstMeta => const TaskConstMeta(
        debugName: "sign_part_1",
        argNames: ["privateShare"],
      );

  @override
  SignatureShareOpaque crateApiMainSignPart2(
      {required List<IdentifierAndSigningCommitment> noncesCommitments,
      required List<int> message,
      Uint8List? merkleRoot,
      required SigningNonces signingNonces,
      required IdentifierOpaque identifier,
      required List<int> privateShare,
      required List<int> groupPk,
      required int threshold}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_identifier_and_signing_commitment(
            noncesCommitments, serializer);
        sse_encode_list_prim_u_8_loose(message, serializer);
        sse_encode_opt_list_prim_u_8_strict(merkleRoot, serializer);
        sse_encode_RustOpaque_frostround1SigningNonces(
            signingNonces, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            identifier, serializer);
        sse_encode_list_prim_u_8_loose(privateShare, serializer);
        sse_encode_list_prim_u_8_loose(groupPk, serializer);
        sse_encode_u_16(threshold, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSignPart2ConstMeta,
      argValues: [
        noncesCommitments,
        message,
        merkleRoot,
        signingNonces,
        identifier,
        privateShare,
        groupPk,
        threshold
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSignPart2ConstMeta => const TaskConstMeta(
        debugName: "sign_part_2",
        argNames: [
          "noncesCommitments",
          "message",
          "merkleRoot",
          "signingNonces",
          "identifier",
          "privateShare",
          "groupPk",
          "threshold"
        ],
      );

  @override
  SignatureShareOpaque crateApiMainSignatureShareFromBytes(
      {required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSignatureShareFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSignatureShareFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "signature_share_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List crateApiMainSignatureShareToBytes(
      {required SignatureShareOpaque share}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
            share, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMainSignatureShareToBytesConstMeta,
      argValues: [share],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSignatureShareToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "signature_share_to_bytes",
        argNames: ["share"],
      );

  @override
  SigningCommitments crateApiMainSigningCommitmentFromBytes(
      {required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostround1SigningCommitments,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSigningCommitmentFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSigningCommitmentFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "signing_commitment_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List crateApiMainSigningCommitmentToBytes(
      {required SigningCommitments commitment}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_frostround1SigningCommitments(
            commitment, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSigningCommitmentToBytesConstMeta,
      argValues: [commitment],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSigningCommitmentToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "signing_commitment_to_bytes",
        argNames: ["commitment"],
      );

  @override
  SigningNonces crateApiMainSigningNoncesFromBytes({required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frostround1SigningNonces,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSigningNoncesFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSigningNoncesFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "signing_nonces_from_bytes",
        argNames: ["bytes"],
      );

  @override
  Uint8List crateApiMainSigningNoncesToBytes({required SigningNonces nonces}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_frostround1SigningNonces(nonces, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMainSigningNoncesToBytesConstMeta,
      argValues: [nonces],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMainSigningNoncesToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "signing_nonces_to_bytes",
        argNames: ["nonces"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgPublicCommitmentOpaque => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgPublicCommitmentOpaque => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound1SecretOpaque => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound1SecretOpaque => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound2SecretOpaque => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound2SecretOpaque => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgRound3Data => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgRound3Data => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DkgShareToGiveOpaque => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DkgShareToGiveOpaque => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IdentifierOpaque => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IdentifierOpaque => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignatureShareOpaque => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignatureShareOpaque => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SigningCommitments => wire
          .rust_arc_increment_strong_count_RustOpaque_frostround1SigningCommitments;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SigningCommitments => wire
          .rust_arc_decrement_strong_count_RustOpaque_frostround1SigningCommitments;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SigningNonces => wire
          .rust_arc_increment_strong_count_RustOpaque_frostround1SigningNonces;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SigningNonces => wire
          .rust_arc_decrement_strong_count_RustOpaque_frostround1SigningNonces;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DkgPublicCommitmentOpaque
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgPublicCommitmentOpaqueImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DkgRound1SecretOpaque
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound1SecretOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound2SecretOpaque
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound2SecretOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound3Data
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgShareToGiveOpaque
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgShareToGiveOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdentifierOpaque
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdentifierOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureShareOpaque
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureShareOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound3Data
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgPublicCommitmentOpaque
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgPublicCommitmentOpaqueImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DkgRound1SecretOpaque
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound1SecretOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound2SecretOpaque
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound2SecretOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound3Data
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgShareToGiveOpaque
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgShareToGiveOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdentifierOpaque
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdentifierOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureShareOpaque
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureShareOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgPublicCommitmentOpaque
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgPublicCommitmentOpaqueImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DkgRound1SecretOpaque
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound1SecretOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound2SecretOpaque
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound2SecretOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgRound3Data
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DkgShareToGiveOpaque
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DkgShareToGiveOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdentifierOpaque
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdentifierOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureShareOpaque
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureShareOpaqueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SigningCommitments dco_decode_RustOpaque_frostround1SigningCommitments(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SigningCommitmentsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SigningNonces dco_decode_RustOpaque_frostround1SigningNonces(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SigningNoncesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  DkgCommitmentForIdentifier dco_decode_dkg_commitment_for_identifier(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DkgCommitmentForIdentifier(
      identifier:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
              arr[0]),
      commitment:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
              arr[1]),
    );
  }

  @protected
  DkgRound2Error dco_decode_dkg_round_2_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DkgRound2Error_General(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return DkgRound2Error_InvalidProofOfKnowledge(
          culprit:
              dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
                  raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DkgRound2IdentifierAndShare dco_decode_dkg_round_2_identifier_and_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DkgRound2IdentifierAndShare(
      identifier:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
              arr[0]),
      secret:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
              arr[1]),
    );
  }

  @protected
  IdentifierAndPublicShare dco_decode_identifier_and_public_share(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IdentifierAndPublicShare(
      identifier:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
              arr[0]),
      publicShare: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  IdentifierAndSignatureShare dco_decode_identifier_and_signature_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IdentifierAndSignatureShare(
      identifier:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
              arr[0]),
      share:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
              arr[1]),
    );
  }

  @protected
  IdentifierAndSigningCommitment dco_decode_identifier_and_signing_commitment(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IdentifierAndSigningCommitment(
      identifier:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
              arr[0]),
      commitment: dco_decode_RustOpaque_frostround1SigningCommitments(arr[1]),
    );
  }

  @protected
  List<DkgCommitmentForIdentifier>
      dco_decode_list_dkg_commitment_for_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dkg_commitment_for_identifier)
        .toList();
  }

  @protected
  List<DkgRound2IdentifierAndShare>
      dco_decode_list_dkg_round_2_identifier_and_share(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dkg_round_2_identifier_and_share)
        .toList();
  }

  @protected
  List<IdentifierAndPublicShare> dco_decode_list_identifier_and_public_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_identifier_and_public_share)
        .toList();
  }

  @protected
  List<IdentifierAndSignatureShare>
      dco_decode_list_identifier_and_signature_share(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_identifier_and_signature_share)
        .toList();
  }

  @protected
  List<IdentifierAndSigningCommitment>
      dco_decode_list_identifier_and_signing_commitment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_identifier_and_signing_commitment)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (
    DkgRound1SecretOpaque,
    DkgPublicCommitmentOpaque
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_1_secret_opaque_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_public_commitment_opaque(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          arr[1]),
    );
  }

  @protected
  (
    DkgRound2SecretOpaque,
    List<DkgRound2IdentifierAndShare>
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_2_secret_opaque_list_dkg_round_2_identifier_and_share(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          arr[0]),
      dco_decode_list_dkg_round_2_identifier_and_share(arr[1]),
    );
  }

  @protected
  (
    SigningNonces,
    SigningCommitments
  ) dco_decode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_RustOpaque_frostround1SigningNonces(arr[0]),
      dco_decode_RustOpaque_frostround1SigningCommitments(arr[1]),
    );
  }

  @protected
  SignAggregationError dco_decode_sign_aggregation_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SignAggregationError_General(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return SignAggregationError_InvalidSignShare(
          culprit:
              dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
                  raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DkgPublicCommitmentOpaque
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgPublicCommitmentOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound1SecretOpaque
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound1SecretOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound2SecretOpaque
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound2SecretOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound3Data
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgShareToGiveOpaque
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgShareToGiveOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdentifierOpaque
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdentifierOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureShareOpaque
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureShareOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound3Data
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgPublicCommitmentOpaque
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgPublicCommitmentOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound1SecretOpaque
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound1SecretOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound2SecretOpaque
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound2SecretOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound3Data
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgShareToGiveOpaque
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgShareToGiveOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdentifierOpaque
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdentifierOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureShareOpaque
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureShareOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgPublicCommitmentOpaque
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgPublicCommitmentOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound1SecretOpaque
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound1SecretOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound2SecretOpaque
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound2SecretOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgRound3Data
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgRound3DataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DkgShareToGiveOpaque
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DkgShareToGiveOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdentifierOpaque
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdentifierOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureShareOpaque
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureShareOpaqueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SigningCommitments sse_decode_RustOpaque_frostround1SigningCommitments(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SigningCommitmentsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SigningNonces sse_decode_RustOpaque_frostround1SigningNonces(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SigningNoncesImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  DkgCommitmentForIdentifier sse_decode_dkg_commitment_for_identifier(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            deserializer);
    var var_commitment =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
            deserializer);
    return DkgCommitmentForIdentifier(
        identifier: var_identifier, commitment: var_commitment);
  }

  @protected
  DkgRound2Error sse_decode_dkg_round_2_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return DkgRound2Error_General(message: var_message);
      case 1:
        var var_culprit =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
                deserializer);
        return DkgRound2Error_InvalidProofOfKnowledge(culprit: var_culprit);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DkgRound2IdentifierAndShare sse_decode_dkg_round_2_identifier_and_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            deserializer);
    var var_secret =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
            deserializer);
    return DkgRound2IdentifierAndShare(
        identifier: var_identifier, secret: var_secret);
  }

  @protected
  IdentifierAndPublicShare sse_decode_identifier_and_public_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            deserializer);
    var var_publicShare = sse_decode_list_prim_u_8_strict(deserializer);
    return IdentifierAndPublicShare(
        identifier: var_identifier, publicShare: var_publicShare);
  }

  @protected
  IdentifierAndSignatureShare sse_decode_identifier_and_signature_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            deserializer);
    var var_share =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
            deserializer);
    return IdentifierAndSignatureShare(
        identifier: var_identifier, share: var_share);
  }

  @protected
  IdentifierAndSigningCommitment sse_decode_identifier_and_signing_commitment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            deserializer);
    var var_commitment =
        sse_decode_RustOpaque_frostround1SigningCommitments(deserializer);
    return IdentifierAndSigningCommitment(
        identifier: var_identifier, commitment: var_commitment);
  }

  @protected
  List<DkgCommitmentForIdentifier>
      sse_decode_list_dkg_commitment_for_identifier(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DkgCommitmentForIdentifier>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dkg_commitment_for_identifier(deserializer));
    }
    return ans_;
  }

  @protected
  List<DkgRound2IdentifierAndShare>
      sse_decode_list_dkg_round_2_identifier_and_share(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DkgRound2IdentifierAndShare>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dkg_round_2_identifier_and_share(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentifierAndPublicShare> sse_decode_list_identifier_and_public_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentifierAndPublicShare>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identifier_and_public_share(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentifierAndSignatureShare>
      sse_decode_list_identifier_and_signature_share(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentifierAndSignatureShare>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identifier_and_signature_share(deserializer));
    }
    return ans_;
  }

  @protected
  List<IdentifierAndSigningCommitment>
      sse_decode_list_identifier_and_signing_commitment(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdentifierAndSigningCommitment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_identifier_and_signing_commitment(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    DkgRound1SecretOpaque,
    DkgPublicCommitmentOpaque
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_1_secret_opaque_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_public_commitment_opaque(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    DkgRound2SecretOpaque,
    List<DkgRound2IdentifierAndShare>
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_2_secret_opaque_list_dkg_round_2_identifier_and_share(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
            deserializer);
    var var_field1 =
        sse_decode_list_dkg_round_2_identifier_and_share(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    SigningNonces,
    SigningCommitments
  ) sse_decode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_frostround1SigningNonces(deserializer);
    var var_field1 =
        sse_decode_RustOpaque_frostround1SigningCommitments(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SignAggregationError sse_decode_sign_aggregation_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return SignAggregationError_General(message: var_message);
      case 1:
        var var_culprit =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
                deserializer);
        return SignAggregationError_InvalidSignShare(culprit: var_culprit);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          DkgPublicCommitmentOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgPublicCommitmentOpaqueImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          DkgRound1SecretOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound1SecretOpaqueImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          DkgRound2SecretOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound2SecretOpaqueImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          DkgRound3Data self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound3DataImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          DkgShareToGiveOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgShareToGiveOpaqueImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          IdentifierOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdentifierOpaqueImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          SignatureShareOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureShareOpaqueImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          DkgRound3Data self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound3DataImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          DkgPublicCommitmentOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgPublicCommitmentOpaqueImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          DkgRound1SecretOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound1SecretOpaqueImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          DkgRound2SecretOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound2SecretOpaqueImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          DkgRound3Data self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound3DataImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          DkgShareToGiveOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgShareToGiveOpaqueImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          IdentifierOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdentifierOpaqueImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          SignatureShareOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureShareOpaqueImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
          DkgPublicCommitmentOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgPublicCommitmentOpaqueImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
          DkgRound1SecretOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound1SecretOpaqueImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
          DkgRound2SecretOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound2SecretOpaqueImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound3Data(
          DkgRound3Data self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgRound3DataImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
          DkgShareToGiveOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DkgShareToGiveOpaqueImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
          IdentifierOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdentifierOpaqueImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
          SignatureShareOpaque self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureShareOpaqueImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_frostround1SigningCommitments(
      SigningCommitments self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SigningCommitmentsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_frostround1SigningNonces(
      SigningNonces self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SigningNoncesImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_dkg_commitment_for_identifier(
      DkgCommitmentForIdentifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
        self.identifier, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
        self.commitment, serializer);
  }

  @protected
  void sse_encode_dkg_round_2_error(
      DkgRound2Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DkgRound2Error_General(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case DkgRound2Error_InvalidProofOfKnowledge(culprit: final culprit):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            culprit, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dkg_round_2_identifier_and_share(
      DkgRound2IdentifierAndShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
        self.identifier, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgShareToGiveOpaque(
        self.secret, serializer);
  }

  @protected
  void sse_encode_identifier_and_public_share(
      IdentifierAndPublicShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
        self.identifier, serializer);
    sse_encode_list_prim_u_8_strict(self.publicShare, serializer);
  }

  @protected
  void sse_encode_identifier_and_signature_share(
      IdentifierAndSignatureShare self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
        self.identifier, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureShareOpaque(
        self.share, serializer);
  }

  @protected
  void sse_encode_identifier_and_signing_commitment(
      IdentifierAndSigningCommitment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
        self.identifier, serializer);
    sse_encode_RustOpaque_frostround1SigningCommitments(
        self.commitment, serializer);
  }

  @protected
  void sse_encode_list_dkg_commitment_for_identifier(
      List<DkgCommitmentForIdentifier> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dkg_commitment_for_identifier(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dkg_round_2_identifier_and_share(
      List<DkgRound2IdentifierAndShare> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dkg_round_2_identifier_and_share(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identifier_and_public_share(
      List<IdentifierAndPublicShare> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identifier_and_public_share(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identifier_and_signature_share(
      List<IdentifierAndSignatureShare> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identifier_and_signature_share(item, serializer);
    }
  }

  @protected
  void sse_encode_list_identifier_and_signing_commitment(
      List<IdentifierAndSigningCommitment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_identifier_and_signing_commitment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_1_secret_opaque_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_public_commitment_opaque(
          (DkgRound1SecretOpaque, DkgPublicCommitmentOpaque) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound1SecretOpaque(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgPublicCommitmentOpaque(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dkg_round_2_secret_opaque_list_dkg_round_2_identifier_and_share(
          (DkgRound2SecretOpaque, List<DkgRound2IdentifierAndShare>) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDkgRound2SecretOpaque(
        self.$1, serializer);
    sse_encode_list_dkg_round_2_identifier_and_share(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_rust_opaque_frostround_1_signing_nonces_rust_opaque_frostround_1_signing_commitments(
          (SigningNonces, SigningCommitments) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_frostround1SigningNonces(self.$1, serializer);
    sse_encode_RustOpaque_frostround1SigningCommitments(self.$2, serializer);
  }

  @protected
  void sse_encode_sign_aggregation_error(
      SignAggregationError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SignAggregationError_General(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case SignAggregationError_InvalidSignShare(culprit: final culprit):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIdentifierOpaque(
            culprit, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class DkgPublicCommitmentOpaqueImpl extends RustOpaque
    implements DkgPublicCommitmentOpaque {
  // Not to be used by end users
  DkgPublicCommitmentOpaqueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DkgPublicCommitmentOpaqueImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DkgPublicCommitmentOpaque,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgPublicCommitmentOpaque,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_DkgPublicCommitmentOpaquePtr,
  );
}

@sealed
class DkgRound1SecretOpaqueImpl extends RustOpaque
    implements DkgRound1SecretOpaque {
  // Not to be used by end users
  DkgRound1SecretOpaqueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DkgRound1SecretOpaqueImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DkgRound1SecretOpaque,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgRound1SecretOpaque,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgRound1SecretOpaquePtr,
  );
}

@sealed
class DkgRound2SecretOpaqueImpl extends RustOpaque
    implements DkgRound2SecretOpaque {
  // Not to be used by end users
  DkgRound2SecretOpaqueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DkgRound2SecretOpaqueImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DkgRound2SecretOpaque,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgRound2SecretOpaque,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgRound2SecretOpaquePtr,
  );
}

@sealed
class DkgRound3DataImpl extends RustOpaque implements DkgRound3Data {
  // Not to be used by end users
  DkgRound3DataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DkgRound3DataImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DkgRound3Data,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DkgRound3Data,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DkgRound3DataPtr,
  );

  Uint8List get groupPk =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorGetGroupPk(
        that: this,
      );

  IdentifierOpaque get identifier =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorGetIdentifier(
        that: this,
      );

  Uint8List get privateShare =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorGetPrivateShare(
        that: this,
      );

  List<IdentifierAndPublicShare> get publicKeyShares => RustLib.instance.api
          .crateApiMainDkgRound3DataAutoAccessorGetPublicKeyShares(
        that: this,
      );

  int get threshold =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorGetThreshold(
        that: this,
      );

  set groupPk(Uint8List groupPk) =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorSetGroupPk(
          that: this, groupPk: groupPk);

  set identifier(IdentifierOpaque identifier) =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorSetIdentifier(
          that: this, identifier: identifier);

  set privateShare(Uint8List privateShare) =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorSetPrivateShare(
          that: this, privateShare: privateShare);

  set publicKeyShares(List<IdentifierAndPublicShare> publicKeyShares) =>
      RustLib.instance.api
          .crateApiMainDkgRound3DataAutoAccessorSetPublicKeyShares(
              that: this, publicKeyShares: publicKeyShares);

  set threshold(int threshold) =>
      RustLib.instance.api.crateApiMainDkgRound3DataAutoAccessorSetThreshold(
          that: this, threshold: threshold);
}

@sealed
class DkgShareToGiveOpaqueImpl extends RustOpaque
    implements DkgShareToGiveOpaque {
  // Not to be used by end users
  DkgShareToGiveOpaqueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DkgShareToGiveOpaqueImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DkgShareToGiveOpaque,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgShareToGiveOpaque,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DkgShareToGiveOpaquePtr,
  );
}

@sealed
class IdentifierOpaqueImpl extends RustOpaque implements IdentifierOpaque {
  // Not to be used by end users
  IdentifierOpaqueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IdentifierOpaqueImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IdentifierOpaque,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IdentifierOpaque,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_IdentifierOpaquePtr,
  );
}

@sealed
class SignatureShareOpaqueImpl extends RustOpaque
    implements SignatureShareOpaque {
  // Not to be used by end users
  SignatureShareOpaqueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignatureShareOpaqueImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_SignatureShareOpaque,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_SignatureShareOpaque,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SignatureShareOpaquePtr,
  );
}

@sealed
class SigningCommitmentsImpl extends RustOpaque implements SigningCommitments {
  // Not to be used by end users
  SigningCommitmentsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SigningCommitmentsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SigningCommitments,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SigningCommitments,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SigningCommitmentsPtr,
  );
}

@sealed
class SigningNoncesImpl extends RustOpaque implements SigningNonces {
  // Not to be used by end users
  SigningNoncesImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SigningNoncesImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SigningNonces,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SigningNonces,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SigningNoncesPtr,
  );
}
