import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:frosty/src/helpers/message_exception.dart';
import 'package:frosty/src/rust_bindings/invalid_object.dart';
import 'package:frosty/src/rust_bindings/rust_api.dart' as rust;
import 'package:frosty/src/rust_bindings/rust_object_wrapper.dart';

/// Thrown when bytes are not a valid public commitment
class InvalidPublicCommitment extends MessageException {
  InvalidPublicCommitment(super.message);
}

/// This class represents information that should be shared to other
/// participants after the first round of the distributed key generation.
/// Participants must ensure that all other participants have the same set of
/// commitments before the DKG can be completed.
///
/// This contains the public commitments for the polynomial co-efficients
/// generated by a participant and a proof of knowledge for the corresponding
/// secret.
class DkgPublicCommitment extends WritableRustObjectWrapper<rust.DkgRound1Package> {

  DkgPublicCommitment.fromUnderlying(super._underlying);

  /// Reads the serialised public commitment from a participant and throws
  /// [InvalidPublicCommitment] if invalid.
  DkgPublicCommitment.fromBytes(Uint8List data) : super(
    handleGetObject(
      () => rust.rustApi.publicCommitmentFromBytes(bytes: data),
      (e) => InvalidPublicCommitment(e),
    ),
    data,
  );

  /// Obtains serialised data for the commitment that can be shared with other
  /// participants.
  @override
  Uint8List serializeImpl() => rust.rustApi.publicCommitmentToBytes(
    commitment: underlying,
  );

}
