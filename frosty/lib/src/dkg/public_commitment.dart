import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:frosty/src/rust_bindings/rust_api.dart' as rust;

/// Thrown when bytes are not a valid public commitment
class InvalidPublicCommitment implements Exception {
  final String error;
  InvalidPublicCommitment(this.error);
  @override
  String toString() => "InvalidPublicCommitment: $error";
}

rust.DkgRound1Package _handleGetCommitment(rust.DkgRound1Package Function() f) {
  try {
    return f();
  } on FrbAnyhowException catch(e) {
    throw InvalidPublicCommitment(e.anyhow);
  }
}

/// This class represents information that should be shared to other
/// participants after the first round of the distributed key generation.
/// Participants must ensure that all other participants have the same set of
/// commitments before the DKG can be completed.
///
/// This contains the public commitments for the polynomial co-efficients
/// generated by a participant and a proof of knowledge for the corresponding
/// secret.
class DkgPublicCommitment {

  final rust.DkgRound1Package underlying;

  DkgPublicCommitment.fromUnderlying({ required this.underlying });

  /// Reads the serialised public commitment from a participant and throws
  /// [InvalidPublicCommitment] if invalid.
  DkgPublicCommitment.fromBytes(Uint8List data)
    : underlying = _handleGetCommitment(
      () => rust.rustApi.publicCommitmentFromBytes(bytes: data),
    );

  /// Obtains serialised data for the commitment that can be shared with other
  /// participants.
  Uint8List toBytes() => rust.rustApi.publicCommitmentToBytes(
    commitment: underlying,
  );

}
