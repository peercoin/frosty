#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_identifier_from_string_impl(
    s: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "identifier_from_string",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_s = s.wire2api();
            identifier_from_string(api_s)
        },
    )
}
fn wire_identifier_from_u16_impl(i: impl Wire2Api<u16> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "identifier_from_u16",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_i = i.wire2api();
            identifier_from_u16(api_i)
        },
    )
}
fn wire_identifier_from_bytes_impl(
    bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "identifier_from_bytes",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_bytes = bytes.wire2api();
            identifier_from_bytes(api_bytes)
        },
    )
}
fn wire_identifier_to_bytes_impl(
    identifier: impl Wire2Api<RustOpaque<frost::Identifier>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "identifier_to_bytes",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_identifier = identifier.wire2api();
            Result::<_, ()>::Ok(identifier_to_bytes(api_identifier))
        },
    )
}
fn wire_dkg_part_1_impl(
    identifier: impl Wire2Api<RustOpaque<frost::Identifier>> + UnwindSafe,
    max_signers: impl Wire2Api<u16> + UnwindSafe,
    min_signers: impl Wire2Api<u16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "dkg_part_1",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_identifier = identifier.wire2api();
            let api_max_signers = max_signers.wire2api();
            let api_min_signers = min_signers.wire2api();
            dkg_part_1(api_identifier, api_max_signers, api_min_signers)
        },
    )
}
fn wire_public_commitment_from_bytes_impl(
    bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "public_commitment_from_bytes",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_bytes = bytes.wire2api();
            public_commitment_from_bytes(api_bytes)
        },
    )
}
fn wire_public_commitment_to_bytes_impl(
    commitment: impl Wire2Api<RustOpaque<dkg::round1::Package>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "public_commitment_to_bytes",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_commitment = commitment.wire2api();
            public_commitment_to_bytes(api_commitment)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_identifier_from_string(
        s: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_identifier_from_string_impl(s)
    }

    #[no_mangle]
    pub extern "C" fn wire_identifier_from_u16(i: u16) -> support::WireSyncReturn {
        wire_identifier_from_u16_impl(i)
    }

    #[no_mangle]
    pub extern "C" fn wire_identifier_from_bytes(
        bytes: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_identifier_from_bytes_impl(bytes)
    }

    #[no_mangle]
    pub extern "C" fn wire_identifier_to_bytes(
        identifier: wire_FrostIdentifier,
    ) -> support::WireSyncReturn {
        wire_identifier_to_bytes_impl(identifier)
    }

    #[no_mangle]
    pub extern "C" fn wire_dkg_part_1(
        identifier: wire_FrostIdentifier,
        max_signers: u16,
        min_signers: u16,
    ) -> support::WireSyncReturn {
        wire_dkg_part_1_impl(identifier, max_signers, min_signers)
    }

    #[no_mangle]
    pub extern "C" fn wire_public_commitment_from_bytes(
        bytes: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_public_commitment_from_bytes_impl(bytes)
    }

    #[no_mangle]
    pub extern "C" fn wire_public_commitment_to_bytes(
        commitment: wire_DkgRound1Package,
    ) -> support::WireSyncReturn {
        wire_public_commitment_to_bytes_impl(commitment)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_DkgRound1Package() -> wire_DkgRound1Package {
        wire_DkgRound1Package::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_FrostIdentifier() -> wire_FrostIdentifier {
        wire_FrostIdentifier::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    #[no_mangle]
    pub extern "C" fn drop_opaque_DkgRound1Package(ptr: *const c_void) {
        unsafe {
            Arc::<dkg::round1::Package>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_DkgRound1Package(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<dkg::round1::Package>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_DkgRound1SecretPackage(ptr: *const c_void) {
        unsafe {
            Arc::<dkg::round1::SecretPackage>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_DkgRound1SecretPackage(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<dkg::round1::SecretPackage>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_FrostIdentifier(ptr: *const c_void) {
        unsafe {
            Arc::<frost::Identifier>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_FrostIdentifier(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<frost::Identifier>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<RustOpaque<dkg::round1::Package>> for wire_DkgRound1Package {
        fn wire2api(self) -> RustOpaque<dkg::round1::Package> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<frost::Identifier>> for wire_FrostIdentifier {
        fn wire2api(self) -> RustOpaque<frost::Identifier> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DkgRound1Package {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FrostIdentifier {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_DkgRound1Package {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_FrostIdentifier {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
