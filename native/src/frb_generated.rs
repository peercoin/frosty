// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::main::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.28";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_aggregate_signature_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aggregate_signature",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nonce_commitments =
                <Vec<crate::api::main::IdentifierAndSigningCommitment>>::sse_decode(
                    &mut deserializer,
                );
            let api_message = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_merkle_root = <Option<Vec<u8>>>::sse_decode(&mut deserializer);
            let api_shares =
                <Vec<crate::api::main::IdentifierAndSignatureShare>>::sse_decode(&mut deserializer);
            let api_group_pk = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_public_shares =
                <Vec<crate::api::main::IdentifierAndPublicShare>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::aggregate_signature(
                    api_nonce_commitments,
                    api_message,
                    api_merkle_root,
                    api_shares,
                    api_group_pk,
                    api_public_shares,
                )
            })())
        },
    )
}
fn wire_dkg_part_1_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dkg_part_1",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(&mut deserializer);
            let api_max_signers = <u16>::sse_decode(&mut deserializer);
            let api_min_signers = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::dkg_part_1(api_identifier, api_max_signers, api_min_signers)
            })())
        },
    )
}
fn wire_dkg_part_2_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dkg_part_2",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_round_1_secret =
                <RustOpaqueMoi<dkg::round1::SecretPackage>>::sse_decode(&mut deserializer);
            let api_round_1_commitments =
                <Vec<crate::api::main::DkgCommitmentForIdentifier>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::dkg_part_2(api_round_1_secret, api_round_1_commitments)
            })())
        },
    )
}
fn wire_dkg_part_3_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dkg_part_3",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_round_2_secret =
                <RustOpaqueMoi<dkg::round2::SecretPackage>>::sse_decode(&mut deserializer);
            let api_round_1_commitments =
                <Vec<crate::api::main::DkgCommitmentForIdentifier>>::sse_decode(&mut deserializer);
            let api_round_2_shares =
                <Vec<crate::api::main::DkgRound2IdentifierAndShare>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::dkg_part_3(
                    api_round_2_secret,
                    api_round_1_commitments,
                    api_round_2_shares,
                )
            })())
        },
    )
}
fn wire_identifier_from_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "identifier_from_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || crate::api::main::identifier_from_bytes(api_bytes))())
        },
    )
}
fn wire_identifier_from_string_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "identifier_from_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || crate::api::main::identifier_from_string(api_s))())
        },
    )
}
fn wire_identifier_from_u16_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "identifier_from_u16",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_i = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || crate::api::main::identifier_from_u16(api_i))())
        },
    )
}
fn wire_identifier_to_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "identifier_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::main::identifier_to_bytes(api_identifier))
            })())
        },
    )
}
fn wire_public_commitment_from_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "public_commitment_from_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::public_commitment_from_bytes(api_bytes)
            })())
        },
    )
}
fn wire_public_commitment_to_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "public_commitment_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_commitment =
                <RustOpaqueMoi<dkg::round1::Package>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::public_commitment_to_bytes(api_commitment)
            })())
        },
    )
}
fn wire_share_to_give_from_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "share_to_give_from_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::share_to_give_from_bytes(api_bytes)
            })())
        },
    )
}
fn wire_share_to_give_to_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "share_to_give_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_share = <RustOpaqueMoi<dkg::round2::Package>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::share_to_give_to_bytes(api_share)
            })())
        },
    )
}
fn wire_sign_part_1_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sign_part_1",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_private_share = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || crate::api::main::sign_part_1(api_private_share))())
        },
    )
}
fn wire_sign_part_2_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sign_part_2",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nonce_commitments =
                <Vec<crate::api::main::IdentifierAndSigningCommitment>>::sse_decode(
                    &mut deserializer,
                );
            let api_message = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_merkle_root = <Option<Vec<u8>>>::sse_decode(&mut deserializer);
            let api_signing_nonce =
                <RustOpaqueMoi<frost::round1::SigningNonces>>::sse_decode(&mut deserializer);
            let api_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(&mut deserializer);
            let api_private_share = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_group_pk = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_threshold = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::sign_part_2(
                    api_nonce_commitments,
                    api_message,
                    api_merkle_root,
                    api_signing_nonce,
                    api_identifier,
                    api_private_share,
                    api_group_pk,
                    api_threshold,
                )
            })())
        },
    )
}
fn wire_signature_share_from_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "signature_share_from_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::signature_share_from_bytes(api_bytes)
            })())
        },
    )
}
fn wire_signature_share_to_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "signature_share_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_share =
                <RustOpaqueMoi<frost::round2::SignatureShare>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::main::signature_share_to_bytes(api_share))
            })())
        },
    )
}
fn wire_signing_commitment_from_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "signing_commitment_from_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::signing_commitment_from_bytes(api_bytes)
            })())
        },
    )
}
fn wire_signing_commitment_to_bytes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "signing_commitment_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_commitment =
                <RustOpaqueMoi<frost::round1::SigningCommitments>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::main::signing_commitment_to_bytes(api_commitment)
            })())
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(dkg::round1::Package);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(dkg::round1::SecretPackage);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(dkg::round2::Package);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(dkg::round2::SecretPackage);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(frost::Identifier);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(frost::round1::SigningCommitments);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(frost::round1::SigningNonces);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(frost::round2::SignatureShare);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode for RustOpaqueMoi<dkg::round1::Package> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<dkg::round1::SecretPackage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<dkg::round2::Package> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<dkg::round2::SecretPackage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<frost::Identifier> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<frost::round1::SigningCommitments> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<frost::round1::SigningNonces> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<frost::round2::SignatureShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::main::DkgCommitmentForIdentifier {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(deserializer);
        let mut var_commitment = <RustOpaqueMoi<dkg::round1::Package>>::sse_decode(deserializer);
        return crate::api::main::DkgCommitmentForIdentifier {
            identifier: var_identifier,
            commitment: var_commitment,
        };
    }
}

impl SseDecode for crate::api::main::DkgRound2IdentifierAndShare {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(deserializer);
        let mut var_secret = <RustOpaqueMoi<dkg::round2::Package>>::sse_decode(deserializer);
        return crate::api::main::DkgRound2IdentifierAndShare {
            identifier: var_identifier,
            secret: var_secret,
        };
    }
}

impl SseDecode for crate::api::main::DkgRound3Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(deserializer);
        let mut var_privateShare = <Vec<u8>>::sse_decode(deserializer);
        let mut var_groupPk = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyShares =
            <Vec<crate::api::main::IdentifierAndPublicShare>>::sse_decode(deserializer);
        let mut var_threshold = <u16>::sse_decode(deserializer);
        return crate::api::main::DkgRound3Data {
            identifier: var_identifier,
            private_share: var_privateShare,
            group_pk: var_groupPk,
            public_key_shares: var_publicKeyShares,
            threshold: var_threshold,
        };
    }
}

impl SseDecode for crate::api::main::IdentifierAndPublicShare {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(deserializer);
        let mut var_publicShare = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::main::IdentifierAndPublicShare {
            identifier: var_identifier,
            public_share: var_publicShare,
        };
    }
}

impl SseDecode for crate::api::main::IdentifierAndSignatureShare {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(deserializer);
        let mut var_share =
            <RustOpaqueMoi<frost::round2::SignatureShare>>::sse_decode(deserializer);
        return crate::api::main::IdentifierAndSignatureShare {
            identifier: var_identifier,
            share: var_share,
        };
    }
}

impl SseDecode for crate::api::main::IdentifierAndSigningCommitment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_identifier = <RustOpaqueMoi<frost::Identifier>>::sse_decode(deserializer);
        let mut var_commitment =
            <RustOpaqueMoi<frost::round1::SigningCommitments>>::sse_decode(deserializer);
        return crate::api::main::IdentifierAndSigningCommitment {
            identifier: var_identifier,
            commitment: var_commitment,
        };
    }
}

impl SseDecode for Vec<crate::api::main::DkgCommitmentForIdentifier> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::main::DkgCommitmentForIdentifier>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::main::DkgRound2IdentifierAndShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::main::DkgRound2IdentifierAndShare>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::main::IdentifierAndPublicShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::main::IdentifierAndPublicShare>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::main::IdentifierAndSignatureShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::main::IdentifierAndSignatureShare>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::main::IdentifierAndSigningCommitment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::main::IdentifierAndSigningCommitment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for (
        RustOpaqueMoi<dkg::round1::SecretPackage>,
        RustOpaqueMoi<dkg::round1::Package>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueMoi<dkg::round1::SecretPackage>>::sse_decode(deserializer);
        let mut var_field1 = <RustOpaqueMoi<dkg::round1::Package>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        RustOpaqueMoi<dkg::round2::SecretPackage>,
        Vec<crate::api::main::DkgRound2IdentifierAndShare>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueMoi<dkg::round2::SecretPackage>>::sse_decode(deserializer);
        let mut var_field1 =
            <Vec<crate::api::main::DkgRound2IdentifierAndShare>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        RustOpaqueMoi<frost::round1::SigningNonces>,
        RustOpaqueMoi<frost::round1::SigningCommitments>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueMoi<frost::round1::SigningNonces>>::sse_decode(deserializer);
        let mut var_field1 =
            <RustOpaqueMoi<frost::round1::SigningCommitments>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        18 => wire_aggregate_signature_impl(ptr, rust_vec_len, data_len),
        5 => wire_dkg_part_1_impl(ptr, rust_vec_len, data_len),
        8 => wire_dkg_part_2_impl(ptr, rust_vec_len, data_len),
        11 => wire_dkg_part_3_impl(ptr, rust_vec_len, data_len),
        3 => wire_identifier_from_bytes_impl(ptr, rust_vec_len, data_len),
        1 => wire_identifier_from_string_impl(ptr, rust_vec_len, data_len),
        2 => wire_identifier_from_u16_impl(ptr, rust_vec_len, data_len),
        4 => wire_identifier_to_bytes_impl(ptr, rust_vec_len, data_len),
        6 => wire_public_commitment_from_bytes_impl(ptr, rust_vec_len, data_len),
        7 => wire_public_commitment_to_bytes_impl(ptr, rust_vec_len, data_len),
        9 => wire_share_to_give_from_bytes_impl(ptr, rust_vec_len, data_len),
        10 => wire_share_to_give_to_bytes_impl(ptr, rust_vec_len, data_len),
        12 => wire_sign_part_1_impl(ptr, rust_vec_len, data_len),
        15 => wire_sign_part_2_impl(ptr, rust_vec_len, data_len),
        16 => wire_signature_share_from_bytes_impl(ptr, rust_vec_len, data_len),
        17 => wire_signature_share_to_bytes_impl(ptr, rust_vec_len, data_len),
        13 => wire_signing_commitment_from_bytes_impl(ptr, rust_vec_len, data_len),
        14 => wire_signing_commitment_to_bytes_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::main::DkgCommitmentForIdentifier {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.identifier.into_into_dart().into_dart(),
            self.commitment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::main::DkgCommitmentForIdentifier
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::main::DkgCommitmentForIdentifier>
    for crate::api::main::DkgCommitmentForIdentifier
{
    fn into_into_dart(self) -> crate::api::main::DkgCommitmentForIdentifier {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::main::DkgRound2IdentifierAndShare {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.identifier.into_into_dart().into_dart(),
            self.secret.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::main::DkgRound2IdentifierAndShare
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::main::DkgRound2IdentifierAndShare>
    for crate::api::main::DkgRound2IdentifierAndShare
{
    fn into_into_dart(self) -> crate::api::main::DkgRound2IdentifierAndShare {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::main::DkgRound3Data {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.identifier.into_into_dart().into_dart(),
            self.private_share.into_into_dart().into_dart(),
            self.group_pk.into_into_dart().into_dart(),
            self.public_key_shares.into_into_dart().into_dart(),
            self.threshold.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::main::DkgRound3Data
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::main::DkgRound3Data>
    for crate::api::main::DkgRound3Data
{
    fn into_into_dart(self) -> crate::api::main::DkgRound3Data {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::main::IdentifierAndPublicShare {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.identifier.into_into_dart().into_dart(),
            self.public_share.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::main::IdentifierAndPublicShare
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::main::IdentifierAndPublicShare>
    for crate::api::main::IdentifierAndPublicShare
{
    fn into_into_dart(self) -> crate::api::main::IdentifierAndPublicShare {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::main::IdentifierAndSignatureShare {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.identifier.into_into_dart().into_dart(),
            self.share.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::main::IdentifierAndSignatureShare
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::main::IdentifierAndSignatureShare>
    for crate::api::main::IdentifierAndSignatureShare
{
    fn into_into_dart(self) -> crate::api::main::IdentifierAndSignatureShare {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::main::IdentifierAndSigningCommitment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.identifier.into_into_dart().into_dart(),
            self.commitment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::main::IdentifierAndSigningCommitment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::main::IdentifierAndSigningCommitment>
    for crate::api::main::IdentifierAndSigningCommitment
{
    fn into_into_dart(self) -> crate::api::main::IdentifierAndSigningCommitment {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<dkg::round1::Package> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<dkg::round1::SecretPackage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<dkg::round2::Package> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<dkg::round2::SecretPackage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<frost::Identifier> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<frost::round1::SigningCommitments> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<frost::round1::SigningNonces> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<frost::round2::SignatureShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::main::DkgCommitmentForIdentifier {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::Identifier>>::sse_encode(self.identifier, serializer);
        <RustOpaqueMoi<dkg::round1::Package>>::sse_encode(self.commitment, serializer);
    }
}

impl SseEncode for crate::api::main::DkgRound2IdentifierAndShare {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::Identifier>>::sse_encode(self.identifier, serializer);
        <RustOpaqueMoi<dkg::round2::Package>>::sse_encode(self.secret, serializer);
    }
}

impl SseEncode for crate::api::main::DkgRound3Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::Identifier>>::sse_encode(self.identifier, serializer);
        <Vec<u8>>::sse_encode(self.private_share, serializer);
        <Vec<u8>>::sse_encode(self.group_pk, serializer);
        <Vec<crate::api::main::IdentifierAndPublicShare>>::sse_encode(
            self.public_key_shares,
            serializer,
        );
        <u16>::sse_encode(self.threshold, serializer);
    }
}

impl SseEncode for crate::api::main::IdentifierAndPublicShare {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::Identifier>>::sse_encode(self.identifier, serializer);
        <Vec<u8>>::sse_encode(self.public_share, serializer);
    }
}

impl SseEncode for crate::api::main::IdentifierAndSignatureShare {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::Identifier>>::sse_encode(self.identifier, serializer);
        <RustOpaqueMoi<frost::round2::SignatureShare>>::sse_encode(self.share, serializer);
    }
}

impl SseEncode for crate::api::main::IdentifierAndSigningCommitment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::Identifier>>::sse_encode(self.identifier, serializer);
        <RustOpaqueMoi<frost::round1::SigningCommitments>>::sse_encode(self.commitment, serializer);
    }
}

impl SseEncode for Vec<crate::api::main::DkgCommitmentForIdentifier> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::main::DkgCommitmentForIdentifier>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::main::DkgRound2IdentifierAndShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::main::DkgRound2IdentifierAndShare>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::main::IdentifierAndPublicShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::main::IdentifierAndPublicShare>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::main::IdentifierAndSignatureShare> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::main::IdentifierAndSignatureShare>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::main::IdentifierAndSigningCommitment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::main::IdentifierAndSigningCommitment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for (
        RustOpaqueMoi<dkg::round1::SecretPackage>,
        RustOpaqueMoi<dkg::round1::Package>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<dkg::round1::SecretPackage>>::sse_encode(self.0, serializer);
        <RustOpaqueMoi<dkg::round1::Package>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        RustOpaqueMoi<dkg::round2::SecretPackage>,
        Vec<crate::api::main::DkgRound2IdentifierAndShare>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<dkg::round2::SecretPackage>>::sse_encode(self.0, serializer);
        <Vec<crate::api::main::DkgRound2IdentifierAndShare>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        RustOpaqueMoi<frost::round1::SigningNonces>,
        RustOpaqueMoi<frost::round1::SigningCommitments>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<frost::round1::SigningNonces>>::sse_encode(self.0, serializer);
        <RustOpaqueMoi<frost::round1::SigningCommitments>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
